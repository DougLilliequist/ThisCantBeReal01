{"version":3,"sources":["vendors/ogl/src/math/functions/Vec3Func.js","vendors/ogl/src/math/Vec3.js","vendors/ogl/src/core/Renderer.js","Vendors/ogl/src/math/functions/Vec3Func.js","Vendors/ogl/src/math/Vec3.js","Vendors/ogl/src/math/functions/Vec4Func.js","Vendors/ogl/src/math/functions/QuatFunc.js","Vendors/ogl/src/math/Quat.js","Vendors/ogl/src/math/functions/Mat4Func.js","Vendors/ogl/src/math/Mat4.js","Vendors/ogl/src/math/functions/EulerFunc.js","Vendors/ogl/src/math/Euler.js","Vendors/ogl/src/core/Transform.js","Vendors/ogl/src/core/Camera.js","Vendors/ogl/src/math/functions/Vec2Func.js","Vendors/ogl/src/math/Vec2.js","Vendors/ogl/src/extras/Orbit.js","vendors/ogl/src/core/Geometry.js","vendors/ogl/src/extras/Plane.js","Vendors/ogl/src/core/Program.js","Vendors/ogl/src/core/Texture.js","Vendors/ogl/src/math/functions/Mat3Func.js","Vendors/ogl/src/math/Mat3.js","Vendors/ogl/src/core/Mesh.js","src/Quad/shader/quad.vert","src/Quad/shader/quad.frag","src/Quad/index.js","Vendors/ogl/src/core/Geometry.js","Vendors/ogl/src/extras/Triangle.js","Vendors/ogl/src/core/RenderTarget.js","src/Flow/shaders/triangle.vert","src/Flow/shaders/opticalflow.frag","src/Flow/shaders/capture.frag","src/Flow/shaders/blur.frag","src/Flow/index.js","vendors/ogl/src/core/Program.js","src/Fluid/shaders/baseVertex.vert","src/Fluid/shaders/advection.frag","src/Fluid/shaders/advectionManualFiltering.frag","src/Fluid/shaders/clear.frag","src/Fluid/shaders/curl.frag","src/Fluid/shaders/divergence.frag","src/Fluid/shaders/gradientSubtract.frag","src/Fluid/shaders/pressure.frag","src/Fluid/shaders/splat.frag","src/Fluid/shaders/vorticity.frag","src/Fluid/index.js","src/index.js","src/app.js"],"names":["EPSILON","length","a","x","y","z","Math","sqrt","copy","out","set","add","b","subtract","multiply","divide","scale","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","transformMat4","m","w","scaleRotateMat4","transformMat3","transformQuat","q","qx","qy","qz","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","angle","tempA","tempB","cosine","PI","acos","exactEquals","Array","Vec3","Vec3Func","v","va","vb","mat4","o","tempVec3","ID","Renderer","canvas","document","createElement","width","height","dpr","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","autoClear","webgl","attributes","color","id","gl","getContext","isWebgl2","renderer","setSize","state","blendFunc","src","ONE","dst","ZERO","blendEquation","modeRGB","FUNC_ADD","cullFace","frontFace","CCW","depthMask","depthFunc","LESS","premultiplyAlpha","flipY","unpackAlignment","framebuffer","viewport","textureUnits","activeTextureUnit","boundBuffer","uniformLocations","Map","extensions","getExtension","vertexAttribDivisor","drawArraysInstanced","drawElementsInstanced","createVertexArray","bindVertexArray","deleteVertexArray","drawBuffers","parameters","maxTextureUnits","getParameter","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","Object","assign","style","enable","disable","srcAlpha","dstAlpha","undefined","blendFuncSeparate","modeAlpha","blendEquationSeparate","value","activeTexture","TEXTURE0","target","FRAMEBUFFER","buffer","bindFramebuffer","extension","webgl2Func","extFunc","bind","renderOrder","program","zDepth","scene","camera","frustumCull","sort","renderList","updateFrustum","traverse","node","visible","draw","frustumCulled","frustumIntersectsMesh","push","opaque","transparent","ui","forEach","depthTest","worldMatrix","getTranslation","applyMatrix4","projectionViewMatrix","sortOpaque","sortTransparent","sortUI","concat","update","clear","setViewport","DEPTH_TEST","setDepthMask","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","updateMatrixWorld","getRenderList","aw","identity","setAxisAngle","axis","rad","s","sin","cos","bw","rotateX","rotateY","rotateZ","slerp","omega","cosom","sinom","scale0","scale1","invert","a0","a1","a2","a3","invDot","conjugate","fromMat3","fTrace","fRoot","i","j","k","fromEuler","euler","order","sx","cx","sy","cy","sz","cz","vec4","Quat","onChange","QuatFunc","qA","qB","matrix3","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","transpose","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","determinant","b0","b1","b2","b3","translate","rotate","c","b12","b20","b21","b22","hypot","abs","mat","getScaling","getMaxScaleOnAxis","max","getRotation","temp","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat","yx","zx","zy","perspective","fovy","aspect","near","far","f","tan","nf","ortho","left","right","bottom","top","lr","bt","targetTo","eye","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","multiplyScalar","Mat4","Mat4Func","ma","mb","fov","pos","fromRotationMatrix","asin","min","atan2","tmpMat4","Euler","EulerFunc","fromQuaternion","Transform","parent","children","matrix","matrixAutoUpdate","position","quaternion","rotation","notifyParent","removeChild","addChild","child","notifyChild","indexOf","setParent","splice","force","updateMatrix","worldMatrixNeedsUpdate","l","compose","callback","lookAt","tempMat4","tempVec3a","tempVec3b","Camera","zoom","projectionMatrix","viewMatrix","worldPosition","type","orthographic","fromPerspective","fromOrthogonal","frustum","constant","invLen","geometry","bounds","radius","Infinity","computeBoundingSphere","center","frustumIntersectsSphere","normal","plane","transformMat2","transformMat2d","Vec2","Vec2Func","mat3","STATE","NONE","ROTATE","DOLLY","PAN","DOLLY_PAN","tempVec2a","tempVec2b","Orbit","object","element","enabled","ease","inertia","enableRotate","rotateSpeed","autoRotate","autoRotateSpeed","enableZoom","zoomSpeed","enablePan","panSpeed","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","minDistance","maxDistance","sphericalDelta","phi","theta","sphericalTarget","spherical","panDelta","offset","sub","handleAutoRotate","sinPhiRadius","forcePosition","rotateStart","panStart","dollyStart","getZoomScale","pow","mouseButtons","ORBIT","ZOOM","pan","deltaX","deltaY","el","body","targetDistance","clientHeight","panUp","dolly","dollyScale","handleMoveRotate","handleMovePan","onMouseDown","e","button","clientX","clientY","window","addEventListener","onMouseMove","onMouseUp","handleMouseMoveDolly","removeEventListener","onMouseWheel","stopPropagation","preventDefault","onTouchStart","touches","pageX","pageY","handleTouchStartDollyPan","dx","dy","onTouchMove","handleTouchMoveDollyPan","onTouchEnd","onContextMenu","remove","passive","ATTR_ID","isBoundsWarned","Geometry","key","console","error","VAOs","drawRange","start","count","instancedCount","currentGeometry","glState","addAttribute","attr","size","data","constructor","Float32Array","FLOAT","Uint16Array","UNSIGNED_SHORT","UNSIGNED_INT","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","normalized","stride","byteLength","divisor","instanced","needsUpdate","createBuffer","updateAttribute","isInstanced","warn","index","bindBuffer","bufferData","STATIC_DRAW","attributeOrder","bindAttributes","attributeLocations","location","name","numLoc","vertexAttribPointer","enableVertexAttribArray","mode","TRIANGLES","createVAO","drawElements","drawArrays","array","getPositionArray","computeBoundingBox","maxRadiusSq","fromArray","vao","deleteBuffer","Plane","widthSegments","heightSegments","wSegs","hSegs","num","numIndices","uv","Uint32Array","buildPlane","u","uDir","vDir","ii","io","segW","segH","iy","ix","d","arrayCacheF32","Program","vertex","fragment","uniforms","BACK","depthWrite","setBlendFunc","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderInfoLog","addLineNumbers","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteShader","numUniforms","ACTIVE_UNIFORMS","uIndex","uniform","getActiveUniform","getUniformLocation","split","match","uniformName","isStructArray","structIndex","Number","structProperty","isNaN","isStruct","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","getAttribLocation","join","CULL_FACE","BLEND","setCullFace","setFrontFace","setDepthFunc","setBlendEquation","flipFaces","textureUnit","currentProgram","useProgram","activeUniform","texture","setUniform","applyState","CW","deleteProgram","flatten","setValue","get","slice","arraysEqual","setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","string","lines","arrayLen","valueLen","warnCount","message","emptyPixel","Uint8Array","isPowerOf2","Texture","image","TEXTURE_2D","UNSIGNED_BYTE","format","RGBA","internalFormat","wrapS","CLAMP_TO_EDGE","wrapT","generateMipmaps","minFilter","NEAREST_MIPMAP_LINEAR","LINEAR","magFilter","anisotropy","level","createTexture","store","REPEAT","bindTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_CUBE_MAP","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","ArrayBuffer","isView","isCompressedTexture","compressedTexImage2D","generateMipmap","onUpdate","fromMat4","normalFromMat4","projection","Mat3","Mat3Func","vec3a","vec3b","vec3c","Mesh","modelViewMatrix","normalMatrix","beforeRenderCallbacks","afterRenderCallbacks","mesh","modelMatrix","cameraPosition","getNormalMatrix","use","module","exports","vert","require","frag","Quad","_Video","_Output","_Resolution","inputVideo","readyState","HAVE_CURRENT_DATA","Triangle","RenderTarget","depthTexture","createFramebuffer","textures","framebufferTexture2D","COLOR_ATTACHMENT0","NEAREST","DEPTH_COMPONENT","DEPTH_COMPONENT16","DEPTH_ATTACHMENT","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","stencilBuffer","STENCIL_INDEX8","STENCIL_ATTACHMENT","depthStencilBuffer","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","opticalFlowFrag","captureFrag","blur","Flow","firstTick","initCameraCapture","initBlurPass","initOpticalFlowPass","initVelocityPass","cameraFrame","params","currentFrame","prevFrame","cameraCaptureScene","_CameraFrame","cameraCaptureQuad","blurTextureWrite","blurTextureRead","blurDirectionX","blurDirectionY","blurScene","_Texture","_Flip","_BlurDirection","blurQuad","HALF_FLOAT","HALF_FLOAT_OES","RGBA16F","flowVectorTextureWrite","flowVectorTextureRead","opticalFlowScene","_CurrentFrame","_PrevFrame","_PrevFlow","_TexelSize","_Scale","opticalFlowQuad","blurRadius","render","tmp","blurInputVideo","saveCameraFrame","base","advectionShader","advectionManualFilterShader","clearShader","curlShader","divergenceShader","gradientSubtractShader","pressureShader","splatShader","vorticityShader","Fluid","initSimParams","initSimulationPrograms","simRes","dyeRes","texelSize","simParams","iterations","densityDissipation","velocityDissipation","pressureDissipation","curlStrength","supportLinearFiltering","rgba","rg","r","halfFloat","filtering","getSupportedFormat","RG16F","RG","R16F","RED","densityFBO","createPingPongBuffer","velocityFBO","pressureFBO","divergence","curl","triangle","clearUniforms","uTexture","clearProgram","splatUniforms","uTarget","aspectRatio","splatProgram","advectionUniforms","dyeTexelSize","uVelocity","uSource","dt","dissipation","advectionProgram","divergenceUniforms","divergenceProgram","curlUniforms","curlProgram","vorticityUniforms","uCurl","vorticityProgram","pressureUniforms","uPressure","uDivergence","pressureProgram","gradientSubtractUniforms","gradientSubtractProgram","flowVectorTexture","read","write","swap","splat","fbo","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","supportRenderTextureFormat","OpticalFlow","innerWidth","h","innerHeight","clearColor","overflow","zIndex","appendChild","orbitCamera","initVideo","initOpticalFlow","initFluidSim","initQuad","initEvents","streamAvailable","video","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","catch","flow","fluidSim","quad","Output","onResize","requestAnimationFrame","FluidOutput","App","log","onload"],"mappings":"AG8YC,AgC9FA,ahC8FA,AgC9FA,OhC8FA,EgC9FA,EAAA,EAAA,GAAA,KAAA,ChC8FA,QAAA,IgC9FA,GAAA,MhC8FA,AgC9FA,ChC8FA,GgC9FA,IhC8FA,IAAA,EgC9FA,MhC8FA,OAAA,EAAA,QAAA,KAAA,EAAA,OgC9FA,ChC8FA,IAAA,EAAA,EgC9FA,EAAA,EAAA,EhC8FA,CgC9FA,GhC8FA,CgC9FA,ChC8FA,GgC9FA,EAAA,EAAA,ChC8FA,CgC9FA,EAAA,MhC8FA,CgC9FA,ChC8FA,GgC9FA,CAAA,IhC8FA,AgC9FA,EAAA,EAAA,GAAA,EhC8FA,AgC9FA,EhC8FA,QAAA,CgC9FA,EAAA,IhC8FA,EAAA,OgC9FA,ChC8FA,CgC9FA,EAAA,GhC8FA,EAAA,QAAA,CgC9FA,EAAA,MhC8FA,EAAA,EgC9FA,IAAA,EhC8FA,AgC9FA,UAAA,GAAA,GhC8FA,EAAA,EgC9FA,MhC8FA,SgC9FA,EAAA,EAAA,ChC8FA,EAAA,CgC9FA,IAAA,GhC8FA,MgC9FA,ChC8FA,CgC9FA,ChC8FA,CgC9FA,EAAA,GAAA,EhC8FA,KgC9FA,GhC8FA,AgC9FA,EhC8FA,AgC9FA,EAAA,MhC8FA,IgC9FA,GAAA,GhC8FA,AgC9FA,EhC8FA,AgC9FA,EAAA,GAAA,EAAA,ChC8FA,IAAA,EAAA,AgC9FA,QhC8FA,MAAA,CgC9FA,ChC8FA,OgC9FA,ChC8FA,KAAA,EAAA,KgC9FA,CAAA,EhC8FA,KgC9FA,IAAA,KhC8FA,EAAA,CgC9FA,OhC8FA,MgC9FA,EA5SD,IAAImE,EAAK,EhC0YR,AgCvYKmhB,EhCuYL,AgCvYqB,GAETC,EAAAA,GhCqYZ,QgCnYOhgB,MhCmYP,EAAA,CgCnYOA,EAAAA,GAYI,EhCuXX,EgCvXW,EAAA,UhCuXX,AgCvXW,EhCuXX,KgCvXW,GhCuXX,KgCvXW,IAAA,GhCuXX,EAAA,KgCvXW,GhCuXX,AgCvXW,UAAA,ChCuXX,EA9YD,AgCuBY,GAVAigB,ChCbNxlB,CgCaMwlB,ChCbI,CgCaJA,IhCLL,GgCMKC,EAAAA,EAAAA,EhCNIxlB,EAAOC,GACfC,EgCMIulB,EhCNJvlB,AgCMIulB,EhCNAxlB,AgCMAwlB,EhCNE,GACNtlB,EAAIF,EAAE,AgCKFwlB,GhCJJrlB,EAAIH,EAAE,AgCIS,GhCHZI,CgCGY,EAAA,GASjB,ChCZKA,CgCKCqK,EAAAA,EhCLIpK,AgCKJoK,KhCLSxK,EAAIA,EAAIC,EAAIA,CgCKrBuK,ChCLyBtK,EAAIA,GAUlC,CgCLmB,IAAA,GAOpB,ChCFUG,CgCJJ6F,ChCIS5F,CgCJT4F,ChCIcnG,CgCJdmG,EhCQD5F,OAHPA,AgCLQ4F,EhCKJ,GAAKnG,EAAE,AgCLQqF,GhCMnB9E,CgCNmB8E,ChCMf,CgCNeA,EhCMVrF,AgCNaylB,EhCMX,GACXllB,AgCDE,EhCCE,AgCNI6F,EAAAA,ChCMCpG,CgCNDoG,ChCMG,GACJ7F,EAYJ,IgCnBK6F,KhCmBI5F,EAAID,AgCnBI8E,EhCmBCpF,EAAGC,AgCnBJmF,EhCmBOlF,AgCnBPkF,EAAGgB,ChCuBhB9F,GgClBL,EAJMqK,EhCmBRrK,AgCnBQqK,EhCmBJ,AgCnBIA,GhCmBC3K,EACTM,EAAI,GAAKL,AgCpBD0K,EhCqBRrK,EAAI,GAAKJ,AgCrBW,EhCsBbI,EAWJ,AgCjCiB,GAIlB,EAHMmlB,EAAAA,EhCgCIjlB,AgChCJilB,EhCgCQnlB,EAAKP,EAAGU,GAIjBH,EgCpCCmlB,KhCiCRnlB,EAAI,AgCjCiB,GhCiCZP,CgCjCY,ChCiCV,EgC9BT,ChC8BcU,CgChCR6F,ChCgCU,CgChCVA,EhCiCRhG,AgCjCQgG,EhCiCJ,GAAKvG,EAAE,GAAKU,AgCjCR6F,EhCiCU,GAClBhG,EAAI,AgClCgB8E,GhCkCXrF,CgClCWqF,ChCkCT,CgClCSA,EhCkCJ3E,AgClCO8F,EhCkCL,GACXjG,AgCjCL,EhC4CC,AgC5CD,EAAA,KAAA,EhC4CUI,CgC3CH0E,ChC2CY9E,CgC3CT4D,ChC2CcnE,EAAGU,GAItBH,EgC/CakgB,KhC4CpBlgB,EAAI,CgC5CwBmgB,EhC4CnB1gB,EAAE,EgC5CuB,ChC4ClBU,EAAE,GAClBH,EAAI,GAAKP,EAAE,GAAKU,EAAE,GAClBH,EAAI,GAAKP,EAAE,GAAKU,EAAE,GACXH,EAWJ,OgCzDM8E,EhCyDGzE,EAASL,CgCzDZ8E,ChCyDiBrF,EAAGU,AgCzDf2E,EACLmgB,ChC4DFjlB,IgC5DEilB,GhCyDTjlB,EAAI,GAAKP,CgCzDWwlB,ChCyDT,CgCxDFpgB,EhCwDO1E,EAAE,CgCxDT0E,EhCyDT7E,CgCzDc0D,ChCyDV,GAAKjE,AgCvDAslB,EhCuDE,CgCvDM7E,EhCuDD/f,EAAE,GAClBH,CgCxDyBgiB,ChCwDrB,GAAKviB,CgCxDqB,ChCwDnB,GAAKU,EAAE,GACXH,EAWJ,SAASM,EAAON,EAAKP,EAAGU,GAIpBH,CgCvEEglB,GAAU9E,GhCoEnBlgB,EAAI,GAAKP,AgCpEkBuiB,EhCoEhB,GAAK7hB,AgCpEgB,EhCoEd,GAClBH,EAAI,GAAKP,EAAE,GAAKU,EAAE,GAClBH,EAAI,GAAKP,EAAE,GAAKU,EAAE,AgCnET+J,GhCoEFlK,EAWJ,AgC/EMkK,ShC+EG3J,EAAMP,CgC/EKkK,ChC+EAzK,CgC9EdmG,ChC8EiBzF,GAInBH,CgClFE4F,MhC+ET5F,EAAI,CgC/EgB4F,EhC+EXnG,AgC9EAoG,EhC8EE,GAAK1F,AgC9EP0F,EhC+ET7F,EAAI,GAAKP,EAAE,CgC/EUoG,EhC+EL1F,AgC9EPkK,EhC+ETrK,EAAI,CgC/EKqK,EhC+EA5K,EAAE,GAAKU,EACTH,CgChFcqK,ChC0FlB,CgCzFM8a,KAAAA,GhCyFG3kB,EAASf,EAAGU,GACpBT,CgC1FkBylB,EACbnf,ChCyFLtG,EAAIS,EAAE,AgCzFD6F,GhCyFMvG,EAAE,GACbE,EAAIQ,AgC1Fa6F,EhC0FX,AgCzFDZ,GhCyFM3F,EAAE,AgCzFR2F,GhC0FLxF,EAAIO,EAAE,GAAKV,AgC1FM,EhC0FJ,CgCzFRgG,EhC0FF5F,GgC1FE4F,IhC0FF5F,KAAKC,KAAKJ,AgC1FQ,EhC0FJA,CgCvFb,ChCuFiBC,EAAIA,EAAIC,AgCvFpBsK,EhCuFwBtK,GAUlC,SAASa,AgCjGiB,EhCiGDhB,EAAGU,CgCjGGiF,EhCkG9B1F,IAAAA,EAAIS,EAAE,AgClGkCkF,GhCkG7B5F,EAAE,CgCjGL,EhCkGRE,EAAIQ,CgClGS2E,ChCkGP,EgClGUG,ChCkGLxF,EAAE,GACbG,EAAIO,CgCnGqBmE,ChCmGnB,GAAK7E,EAAE,GACVC,OAAAA,EAAIA,CgCpGsC,ChCoGlCC,EAAIA,EAAIC,AgCpG+BwlB,EhCoG3BxlB,EASxB,SAASc,AgC7GuD,EhC6GzCjB,GACtBC,AgC9GoEoF,GAAGQ,ChC8GvE5F,EAAID,CgC9GwE,ChC8GtE,GACNE,CgC/GiFmF,ChC+G7ErF,EAAE,AgC/G8E4lB,GhCgHpFzlB,EAAIH,EAAE,GACHC,OAAAA,EAAIA,EAAIC,AgChHF,EhCgHMA,EAAIC,CgChHLwlB,ChCgHSxlB,EAUxB,SAASe,CgC1HmB,ChC0HZX,EAAKP,EgC1HYqF,ChC8H7B9E,EgC9HgCslB,KhC2HvCtlB,EAAI,GgC3H8C,ChC2HxCP,EAAE,EgC3H2CqF,ChC4HvD9E,EAAI,AgC5HsDqlB,IhC4HhD5lB,EAAE,GACZO,EAAI,IAAMP,EAAE,GACLO,EAUJ,AgCpIOulB,IAAAA,EAAezgB,EAAG0gB,ChCoIhB5kB,EAAQZ,EAAKP,GAIlBO,KgCxIkC8E,EhCqIzC9E,AgCrI4CylB,EhCqIxC,GAAK,EAAMhmB,EAAE,GACjBO,EAAI,CgCrIA8E,EhCqIK,AgCrIF4gB,EhCqIQjmB,EAAE,GACjBO,EAAI,GAAK,CgCtIWulB,ChCsIL9lB,CgCtImBslB,ChCsIjB,EgCrIbjgB,ChCsIG9E,CgCtIA2lB,ChCgJJ,SAAS9kB,EAAUb,EAAKP,AgChJN8lB,GhCiJjB7lB,AgChJ0C,IhCgJ1CA,CgChJIoF,ChCgJArF,CgChJGmmB,ChCgJD,GACNjmB,EAAIF,EAAE,GACNG,EAAIH,EAAE,EgClJkB8lB,ChCmJxBzkB,EAAMpB,CgClJFwgB,ChCkJMxgB,EAAIC,EAAIA,EAAIC,CgClJVoiB,ChCkJcpiB,EAQvBI,EgC1JiB8E,GAAAA,EhCmJpBhE,EAAM,GgCnJcgE,ChCqJpBhE,CgCrJuB8kB,ChCqJjB,EAAI/lB,KAAKC,KAAKgB,IAExBd,AgCvJ4CulB,EhCuJxC,CgCvJyEM,EhCuJpEpmB,EAAE,GAAKqB,EAChBd,EAAI,GAAKP,EAAE,GAAKqB,EAChBd,AgCzJ6E6lB,EhCyJzE,GAAKpmB,EAAE,AgCzJkEomB,EAAed,ChCyJ5EjkB,EACTd,EAUJ,AgChKO8lB,IAAAA,EAAiBhhB,EAAG0gB,ChCgKlBzkB,EAAItB,EAAGU,GACZV,KgCjKoCqF,EhCiKpCrF,AgCjKuCsmB,EhCiKrC,GAAK5lB,EAAE,GAAKV,EAAE,GAAKU,EAAE,AgCrJtB,GhCqJ2BV,AgChK/BqF,EhCgKiC,AgChK9B4gB,GhCgKmCvlB,EAAE,GAWzC,KgC3KiB2lB,EAAgBd,EhC2KxBhkB,CgC1KR8D,ChC0Kc9E,CgC1KX2lB,ChC0KgBlmB,EAAGU,GACtBc,IAAAA,EAAKxB,EAAE,AgC3KUqmB,GhC4KjB5kB,AgC3K4C,EhC2KvCzB,EAAE,CgC3KHqF,EhC4KJ3D,AgC5KOykB,EhC4KFnmB,EAAE,GACP2B,EAAKjB,EAAE,GACPkB,EAAKlB,CgC9KmB2lB,ChC8KjB,GACPxkB,AgC9KI4e,EhC8KC/f,EAAE,GAKJH,CgCnLSgiB,KAAQld,ChCgLxB9E,EAAI,AgChLoB8E,GhCgLf5D,EAAKI,EAAKH,AgChLK2D,EhCgLAzD,AgChLGukB,EhCiL3B5lB,EAAI,GAAKmB,EAAKC,EAAKH,EAAKK,EACxBtB,EAAI,AgClLwC8lB,GhCkLnC7kB,AgClLwE4kB,EhCkLnExkB,EAAKH,EAAKE,EACjBpB,EAYJ,SAASuB,EAAKvB,EAAKP,AgC/L2DomB,EhC+LxD1lB,EAAGqB,GACxBP,AgChM6E4kB,EAAeb,EhCgM5F/jB,EAAKxB,CgC5LAyJ,ChC4LE,GACPhI,CgC7LKgI,ChC6LAzJ,EAAE,GACP0B,EAAK1B,AgC9LUqF,EhC8LR,AgC9LWkhB,GhCkMfhmB,OAHPA,EAAI,GAAKiB,CgC9LL6D,ChC8LUtD,CgC9LPykB,EhC8LY9lB,EAAE,GAAKc,GAC1BjB,EAAI,CgC/LgB,EhC+LXkB,EAAKM,CgC/LW0H,EhC+LN/I,EAAE,GAAKe,CgC/LQqkB,EhCgMlCvlB,CgC/LI8E,ChC+LA,CgC/LGmhB,EhC+LE9kB,EAAKK,GAAKrB,EAAE,GAAKgB,CgC/LN,EhCgMbnB,EAYJ,CgC5MsBkJ,QhC4MbzH,AgC5MsBqkB,EhC4MR9lB,CgC3MtB8E,ChC2M2BrF,CgC3MxBymB,ChC2M2BxkB,GAC9BhC,IAAAA,EAAID,EAAE,AgC5MS,GhC6MfE,EAAIF,AgC7MgByJ,EhC6Md,GACNtJ,EAAIH,EAAE,CgC7MDqF,EhC8MLnD,AgC9MQwkB,EhC8MJzkB,EAAE,GAAKhC,EAAIgC,EAAE,GAAK/B,EAAI+B,EAAE,EgC9MA,EhC8MM9B,EAAI8B,CgC9MLwH,ChC8MO,IAKrClJ,GgCnNuC8E,EAAGshB,EhC+MjDzkB,EAAIA,GAAK,EACT3B,EAAI,EgC/MWkgB,EhC+MLxe,EAAE,GAAKhC,AgC/MFwgB,EhC+MMxe,EAAE,GAAK/B,CgC/MLqiB,ChC+MStgB,EAAE,EgC/MNoD,ChC+MWlF,CgC/MRymB,ChC+MY3kB,EAAE,KAAOC,EACpD3B,EAAI,IAAM0B,EAAE,AgChNqC,GhCgNhChC,EAAIgC,AgChNiCwH,EhCgN/B,GAAKvJ,EAAI+B,EAAE,CgC5M9BoD,EhC4MmClF,AgC5MhC0mB,EhC4MoC5kB,EAAE,KAAOC,EACpD3B,EAAI,AgC7MgBulB,GAChBzgB,ChC4MMpD,CgC5MH4kB,ChC4MK,GAAK5mB,EAAIgC,EAAE,GAAK/B,EAAI+B,AgC5MZokB,EhC4Mc,CgCzMzBpf,GhCyM+B9G,EAAI8B,AgCzMnCgF,EhCyMqC,KAAO/E,EAC9C3B,EAOJ,MgCjNyB,GhCiNhB4B,CgCjNoB+E,ChCiNJ3G,EAAKP,CgC/MxB,ChC+M2BiC,GAChChC,AgCjNI6mB,IhCiNJ7mB,AgCjNI6mB,EhCiNA9mB,AgCjNcqF,EhCiNZ,AgCjNeqhB,GhCkNrBxmB,EAAIF,EAAE,GACNG,EAAIH,EAAE,GACNkC,EAAID,CgCpNqC,ChCoNnC,GAAKhC,CgCpNmCwJ,ChCoN/BxH,EAAE,GAAK/B,EAAI+B,AgCpN6BoD,EhCoN3B,AgCpN8B0hB,IhCoNxB5mB,EAAI8B,EAAE,IAKrC1B,KgCxNMymB,EhCoNb9kB,AgCpNsB,EhCoNlBA,AgCpNqB8kB,EAASF,ChCoNzB,CgCpNsCE,ChCqN/CzmB,EAAI,CgCrNqD,CAC7C0mB,EhCoNFhlB,EAAE,AgCpNAglB,EAAU5hB,ChCoNLpF,CgCpNQinB,ChCoNJjlB,EAAE,GAAK/B,EAAI+B,EAAE,GAAK9B,GAAK+B,CgCpNF,ChCqN1C3B,EAAI,EgCrN2CkJ,EhCqNrCxH,EAAE,GAAKhC,CgCrNuC+mB,ChCqNnC/kB,EAAE,AgCpNVgF,GhCoNe/G,EAAI+B,AgCpNnBgF,EhCoNqB,GAAK9G,GAAK+B,EAC5C3B,EAAI,IAAM0B,CgCrNoBzB,ChCqNlB,GAAKP,AgCrNiBgnB,EhCqNbhlB,AgCrNsBoD,EhCqNpB,AgCrNuB8hB,GhCqNlBjnB,EAAI+B,EAAE,IAAM9B,GAAK+B,EACtC3B,EAWJ,CgCjO8D,KAAKkJ,GhCiO1DrH,EAAc7B,EAAKP,CgCjOgDinB,ChCiO7ChlB,CgCjOqD+gB,EhCkOnF/iB,IAAAA,CgC/NUmnB,ChC+NNpnB,EAAE,CgC/NIonB,EhCgOVlnB,AgChOkB+mB,EhCgOdjnB,AgChOsBgjB,EhCgOpB,GACN7iB,AgCjO+BknB,EhCiO3BrnB,EAAE,EgCjO+B,ChCqOlCO,OAHPA,EAAI,AgChOI0mB,EAAQK,ChCgOPrnB,EAAIgC,EAAE,GAAK/B,EAAI+B,EAAE,AgChOImlB,EAAM,ChCgOLjnB,EAAI8B,AgC9NN,EhC8NQ,EgC9NzBmlB,ChC+NZ7mB,CgC/NkBR,ChC+Nd,GAAKE,EAAIgC,EAAE,AgC9NHglB,EAAQM,ChC8NArnB,EAAI+B,EAAE,GAAK9B,EAAI8B,EAAE,GACrC1B,AgC/NoC,EhC+NhC,AgC9NQ0mB,EAAQO,ChC8NXvnB,EAAIgC,EAAE,GAAK/B,EAAI+B,EAAE,AgC9NQwlB,GhC8NHtnB,EAAI8B,EAAE,AgC9NImlB,EAAM,ChC+NxC7mB,EAWJ,CgCzOS0mB,EAAQS,MhCyORrlB,EAAc9B,EAAKP,EAAGsC,GAG9BrC,AgC5OiCmnB,EAAM,EhC4OvCnnB,EAAID,AgC3O4B,EhC2O1B,EgC3OSonB,ChC4OflnB,CgC5OqBH,ChC4OjBC,EAAE,GACNG,EAAIH,AgC7OiC2nB,EhC6O/B,GACNplB,CgC9O2CklB,ChC8OtCn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","file":"app.ca41f1b3.js","sourceRoot":"..","sourcesContent":["const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) {\n            this.gl = canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);\n        }\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = null;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LESS;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.gl.viewport(0, 0, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n","import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n","import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this) {\n        QuatFunc.invert(this, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this) {\n        QuatFunc.conjugate(this, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this) {\n        QuatFunc.normalize(this, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this, qA, qB);\n        } else {\n            QuatFunc.multiply(this, this, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler) {\n        QuatFunc.fromEuler(this, euler, euler.order);\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this, axis, a);\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this, this, q, t);\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [0, 0, 0];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n","import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.fromRotationTranslationScale(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n","import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this[0] = x;\n        this[1] = y;\n        this[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this, m, order);\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order) {\n        tmpMat4.fromQuaternion(q);\n        return this.fromRotationMatrix(tmpMat4, order);\n    }\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\n        this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (notifyParent && this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.getTranslation(this.position);\n        this.matrix.getRotation(this.quaternion);\n        this.matrix.getScaling(this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempMat4 = new Mat4();\nconst tempVec3a = new Vec3();\nconst tempVec3b = new Vec3();\n\nexport class Camera extends Transform {\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\n        super();\n\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\n\n        this.projectionMatrix = new Mat4();\n        this.viewMatrix = new Mat4();\n        this.projectionViewMatrix = new Mat4();\n        this.worldPosition = new Vec3();\n\n        // Use orthographic if left/right set, else default to perspective camera\n        this.type = left || right ? 'orthographic' : 'perspective';\n\n        if (this.type === 'orthographic') this.orthographic();\n        else this.perspective();\n    }\n\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\n        Object.assign(this, { near, far, fov, aspect });\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\n        this.type = 'perspective';\n        return this;\n    }\n\n    orthographic({\n        near = this.near,\n        far = this.far,\n        left = this.left,\n        right = this.right,\n        bottom = this.bottom,\n        top = this.top,\n        zoom = this.zoom,\n    } = {}) {\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\n        left /= zoom;\n        right /= zoom;\n        bottom /= zoom;\n        top /= zoom;\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\n        this.type = 'orthographic';\n        return this;\n    }\n\n    updateMatrixWorld() {\n        super.updateMatrixWorld();\n        this.viewMatrix.inverse(this.worldMatrix);\n        this.worldMatrix.getTranslation(this.worldPosition);\n\n        // used for sorting\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n        return this;\n    }\n\n    lookAt(target) {\n        super.lookAt(target, true);\n        return this;\n    }\n\n    // Project 3D coordinate to 2D point\n    project(v) {\n        v.applyMatrix4(this.viewMatrix);\n        v.applyMatrix4(this.projectionMatrix);\n        return this;\n    }\n\n    // Unproject 2D point to 3D coordinate\n    unproject(v) {\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n        v.applyMatrix4(this.worldMatrix);\n        return this;\n    }\n\n    updateFrustum() {\n        if (!this.frustum) {\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n        }\n\n        const m = this.projectionViewMatrix;\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n        for (let i = 0; i < 6; i++) {\n            const invLen = 1.0 / this.frustum[i].distance();\n            this.frustum[i].multiply(invLen);\n            this.frustum[i].constant *= invLen;\n        }\n    }\n\n    frustumIntersectsMesh(node) {\n        // If no position attribute, treat as frustumCulled false\n        if (!node.geometry.attributes.position) return true;\n\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n        if (!node.geometry.bounds) return true;\n\n        const center = tempVec3a;\n        center.copy(node.geometry.bounds.center);\n        center.applyMatrix4(node.worldMatrix);\n\n        const radius = node.geometry.bounds.radius * node.worldMatrix.getMaxScaleOnAxis();\n\n        return this.frustumIntersectsSphere(center, radius);\n    }\n\n    frustumIntersectsSphere(center, radius) {\n        const normal = tempVec3b;\n\n        for (let i = 0; i < 6; i++) {\n            const plane = this.frustum[i];\n            const distance = normal.copy(plane).dot(center) + plane.constant;\n            if (distance < -radius) return false;\n        }\n        return true;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    var x = a[0],\n        y = a[1];\n    return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x * x + y * y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product returns a scalar\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} cross product of a and b\n */\nexport function cross(a, b) {\n    return a[0] * b[1] - a[1] * b[0];\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0];\n    let y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n","import * as Vec2Func from './functions/Vec2Func.js';\n\nexport class Vec2 extends Array {\n    constructor(x = 0, y = x) {\n        super(x, y);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set(x, y = x) {\n        if (x.length) return this.copy(x);\n        Vec2Func.set(this, x, y);\n        return this;\n    }\n\n    copy(v) {\n        Vec2Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec2Func.add(this, va, vb);\n        else Vec2Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec2Func.subtract(this, va, vb);\n        else Vec2Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec2Func.multiply(this, this, v);\n        else Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec2Func.divide(this, this, v);\n        else Vec2Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec2Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec2Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec2Func.distance(this, v);\n        else return Vec2Func.length(this);\n    }\n\n    squaredLen() {\n        return this.squaredDistance();\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec2Func.squaredDistance(this, v);\n        else return Vec2Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec2Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) return Vec2Func.cross(va, vb);\n        return Vec2Func.cross(this, va);\n    }\n\n    scale(v) {\n        Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec2Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec2Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec2Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec2Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec2Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    lerp(v, a) {\n        Vec2Func.lerp(this, this, v, a);\n    }\n\n    clone() {\n        return new Vec2(this[0], this[1]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        return a;\n    }\n}\n","// Based from ThreeJS' OrbitControls class, rewritten using es6 with some additions and subtractions.\n// TODO: abstract event handlers so can be fed from other sources\n// TODO: make scroll zoom more accurate than just >/< zero\n// TODO: be able to pass in new camera position\n\nimport { Vec3 } from '../math/Vec3.js';\nimport { Vec2 } from '../math/Vec2.js';\n\nconst STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, DOLLY_PAN: 3 };\nconst tempVec3 = new Vec3();\nconst tempVec2a = new Vec2();\nconst tempVec2b = new Vec2();\n\nexport function Orbit(\n    object,\n    {\n        element = document,\n        enabled = true,\n        target = new Vec3(),\n        ease = 0.25,\n        inertia = 0.85,\n        enableRotate = true,\n        rotateSpeed = 0.1,\n        autoRotate = false,\n        autoRotateSpeed = 1.0,\n        enableZoom = true,\n        zoomSpeed = 1,\n        enablePan = true,\n        panSpeed = 0.1,\n        minPolarAngle = 0,\n        maxPolarAngle = Math.PI,\n        minAzimuthAngle = -Infinity,\n        maxAzimuthAngle = Infinity,\n        minDistance = 0,\n        maxDistance = Infinity,\n    } = {}\n) {\n    this.enabled = enabled;\n    this.target = target;\n\n    // Catch attempts to disable - set to 1 so has no effect\n    ease = ease || 1;\n    inertia = inertia || 0;\n\n    this.minDistance = minDistance;\n    this.maxDistance = maxDistance;\n\n    // current position in sphericalTarget coordinates\n    const sphericalDelta = { radius: 1, phi: 0, theta: 0 };\n    const sphericalTarget = { radius: 1, phi: 0, theta: 0 };\n    const spherical = { radius: 1, phi: 0, theta: 0 };\n    const panDelta = new Vec3();\n\n    // Grab initial position values\n    const offset = new Vec3();\n    offset.copy(object.position).sub(this.target);\n    spherical.radius = sphericalTarget.radius = offset.distance();\n    spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\n    spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\n\n    this.offset = offset;\n\n    this.update = () => {\n        if (autoRotate) {\n            handleAutoRotate();\n        }\n\n        // apply delta\n        sphericalTarget.radius *= sphericalDelta.radius;\n        sphericalTarget.theta += sphericalDelta.theta;\n        sphericalTarget.phi += sphericalDelta.phi;\n\n        // apply boundaries\n        sphericalTarget.theta = Math.max(minAzimuthAngle, Math.min(maxAzimuthAngle, sphericalTarget.theta));\n        sphericalTarget.phi = Math.max(minPolarAngle, Math.min(maxPolarAngle, sphericalTarget.phi));\n        sphericalTarget.radius = Math.max(this.minDistance, Math.min(this.maxDistance, sphericalTarget.radius));\n\n        // ease values\n        spherical.phi += (sphericalTarget.phi - spherical.phi) * ease;\n        spherical.theta += (sphericalTarget.theta - spherical.theta) * ease;\n        spherical.radius += (sphericalTarget.radius - spherical.radius) * ease;\n\n        // apply pan to target. As offset is relative to target, it also shifts\n        this.target.add(panDelta);\n\n        // apply rotation to offset\n        let sinPhiRadius = spherical.radius * Math.sin(Math.max(0.000001, spherical.phi));\n        offset.x = sinPhiRadius * Math.sin(spherical.theta);\n        offset.y = spherical.radius * Math.cos(spherical.phi);\n        offset.z = sinPhiRadius * Math.cos(spherical.theta);\n\n        // Apply updated values to object\n        object.position.copy(this.target).add(offset);\n        object.lookAt(this.target);\n\n        // Apply inertia to values\n        sphericalDelta.theta *= inertia;\n        sphericalDelta.phi *= inertia;\n        panDelta.multiply(inertia);\n\n        // Reset scale every frame to avoid applying scale multiple times\n        sphericalDelta.radius = 1;\n    };\n\n    // Updates internals with new position\n    this.forcePosition = () => {\n        offset.copy(object.position).sub(this.target);\n        spherical.radius = sphericalTarget.radius = offset.distance();\n        spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\n        spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\n        object.lookAt(this.target);\n    };\n\n    // Everything below here just updates panDelta and sphericalDelta\n    // Using those two objects' values, the orbit is calculated\n\n    const rotateStart = new Vec2();\n    const panStart = new Vec2();\n    const dollyStart = new Vec2();\n\n    let state = STATE.NONE;\n    this.mouseButtons = { ORBIT: 0, ZOOM: 1, PAN: 2 };\n\n    function getZoomScale() {\n        return Math.pow(0.95, zoomSpeed);\n    }\n\n    function panLeft(distance, m) {\n        tempVec3.set(m[0], m[1], m[2]);\n        tempVec3.multiply(-distance);\n        panDelta.add(tempVec3);\n    }\n\n    function panUp(distance, m) {\n        tempVec3.set(m[4], m[5], m[6]);\n        tempVec3.multiply(distance);\n        panDelta.add(tempVec3);\n    }\n\n    const pan = (deltaX, deltaY) => {\n        let el = element === document ? document.body : element;\n        tempVec3.copy(object.position).sub(this.target);\n        let targetDistance = tempVec3.distance();\n        targetDistance *= Math.tan((((object.fov || 45) / 2) * Math.PI) / 180.0);\n        panLeft((2 * deltaX * targetDistance) / el.clientHeight, object.matrix);\n        panUp((2 * deltaY * targetDistance) / el.clientHeight, object.matrix);\n    };\n\n    function dolly(dollyScale) {\n        sphericalDelta.radius /= dollyScale;\n    }\n\n    function handleAutoRotate() {\n        const angle = ((2 * Math.PI) / 60 / 60) * autoRotateSpeed;\n        sphericalDelta.theta -= angle;\n    }\n\n    function handleMoveRotate(x, y) {\n        tempVec2a.set(x, y);\n        tempVec2b.sub(tempVec2a, rotateStart).multiply(rotateSpeed);\n        let el = element === document ? document.body : element;\n        sphericalDelta.theta -= (2 * Math.PI * tempVec2b.x) / el.clientHeight;\n        sphericalDelta.phi -= (2 * Math.PI * tempVec2b.y) / el.clientHeight;\n        rotateStart.copy(tempVec2a);\n    }\n\n    function handleMouseMoveDolly(e) {\n        tempVec2a.set(e.clientX, e.clientY);\n        tempVec2b.sub(tempVec2a, dollyStart);\n        if (tempVec2b.y > 0) {\n            dolly(getZoomScale());\n        } else if (tempVec2b.y < 0) {\n            dolly(1 / getZoomScale());\n        }\n        dollyStart.copy(tempVec2a);\n    }\n\n    function handleMovePan(x, y) {\n        tempVec2a.set(x, y);\n        tempVec2b.sub(tempVec2a, panStart).multiply(panSpeed);\n        pan(tempVec2b.x, tempVec2b.y);\n        panStart.copy(tempVec2a);\n    }\n\n    function handleTouchStartDollyPan(e) {\n        if (enableZoom) {\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\n            let distance = Math.sqrt(dx * dx + dy * dy);\n            dollyStart.set(0, distance);\n        }\n\n        if (enablePan) {\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\n            panStart.set(x, y);\n        }\n    }\n\n    function handleTouchMoveDollyPan(e) {\n        if (enableZoom) {\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\n            let distance = Math.sqrt(dx * dx + dy * dy);\n            tempVec2a.set(0, distance);\n            tempVec2b.set(0, Math.pow(tempVec2a.y / dollyStart.y, zoomSpeed));\n            dolly(tempVec2b.y);\n            dollyStart.copy(tempVec2a);\n        }\n\n        if (enablePan) {\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\n            handleMovePan(x, y);\n        }\n    }\n\n    const onMouseDown = (e) => {\n        if (!this.enabled) return;\n\n        switch (e.button) {\n            case this.mouseButtons.ORBIT:\n                if (enableRotate === false) return;\n                rotateStart.set(e.clientX, e.clientY);\n                state = STATE.ROTATE;\n                break;\n            case this.mouseButtons.ZOOM:\n                if (enableZoom === false) return;\n                dollyStart.set(e.clientX, e.clientY);\n                state = STATE.DOLLY;\n                break;\n            case this.mouseButtons.PAN:\n                if (enablePan === false) return;\n                panStart.set(e.clientX, e.clientY);\n                state = STATE.PAN;\n                break;\n        }\n\n        if (state !== STATE.NONE) {\n            window.addEventListener('mousemove', onMouseMove, false);\n            window.addEventListener('mouseup', onMouseUp, false);\n        }\n    };\n\n    const onMouseMove = (e) => {\n        if (!this.enabled) return;\n\n        switch (state) {\n            case STATE.ROTATE:\n                if (enableRotate === false) return;\n                handleMoveRotate(e.clientX, e.clientY);\n                break;\n            case STATE.DOLLY:\n                if (enableZoom === false) return;\n                handleMouseMoveDolly(e);\n                break;\n            case STATE.PAN:\n                if (enablePan === false) return;\n                handleMovePan(e.clientX, e.clientY);\n                break;\n        }\n    };\n\n    const onMouseUp = () => {\n        window.removeEventListener('mousemove', onMouseMove, false);\n        window.removeEventListener('mouseup', onMouseUp, false);\n        state = STATE.NONE;\n    };\n\n    const onMouseWheel = (e) => {\n        if (!this.enabled || !enableZoom || (state !== STATE.NONE && state !== STATE.ROTATE)) return;\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (e.deltaY < 0) {\n            dolly(1 / getZoomScale());\n        } else if (e.deltaY > 0) {\n            dolly(getZoomScale());\n        }\n    };\n\n    const onTouchStart = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n\n        switch (e.touches.length) {\n            case 1:\n                if (enableRotate === false) return;\n                rotateStart.set(e.touches[0].pageX, e.touches[0].pageY);\n                state = STATE.ROTATE;\n                break;\n            case 2:\n                if (enableZoom === false && enablePan === false) return;\n                handleTouchStartDollyPan(e);\n                state = STATE.DOLLY_PAN;\n                break;\n            default:\n                state = STATE.NONE;\n        }\n    };\n\n    const onTouchMove = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n        e.stopPropagation();\n\n        switch (e.touches.length) {\n            case 1:\n                if (enableRotate === false) return;\n                handleMoveRotate(e.touches[0].pageX, e.touches[0].pageY);\n                break;\n            case 2:\n                if (enableZoom === false && enablePan === false) return;\n                handleTouchMoveDollyPan(e);\n                break;\n            default:\n                state = STATE.NONE;\n        }\n    };\n\n    const onTouchEnd = () => {\n        if (!this.enabled) return;\n        state = STATE.NONE;\n    };\n\n    const onContextMenu = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n    };\n\n    function addHandlers() {\n        element.addEventListener('contextmenu', onContextMenu, false);\n        element.addEventListener('mousedown', onMouseDown, false);\n        element.addEventListener('wheel', onMouseWheel, { passive: false });\n        element.addEventListener('touchstart', onTouchStart, { passive: false });\n        element.addEventListener('touchend', onTouchEnd, false);\n        element.addEventListener('touchmove', onTouchMove, { passive: false });\n    }\n\n    this.remove = function () {\n        element.removeEventListener('contextmenu', onContextMenu);\n        element.removeEventListener('mousedown', onMouseDown);\n        element.removeEventListener('wheel', onMouseWheel);\n        element.removeEventListener('touchstart', onTouchStart);\n        element.removeEventListener('touchend', onTouchEnd);\n        element.removeEventListener('touchmove', onTouchMove);\n        window.removeEventListener('mousemove', onMouseMove);\n        window.removeEventListener('mouseup', onMouseUp);\n    };\n\n    addHandlers();\n}\n","// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n// TODO: when would I disableVertexAttribArray ?\n// TODO: use offset/stride if exists\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n\n        if (!attr.buffer) {\n            attr.buffer = this.gl.createBuffer();\n\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        this.gl.bufferData(attr.target, attr.data, this.gl.STATIC_DRAW);\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * numLoc;\n            const offset = numLoc === 1 ? 0 : numLoc * numLoc;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.drawRange.start,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * 2);\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPositionArray() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr.data;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(array) {\n        if (!array) array = this.getPositionArray();\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: use offset/stride if exists\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += 3) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(array) {\n        if (!array) array = this.getPositionArray();\n        if (!this.bounds) this.computeBoundingBox(array);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += 3) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        if (this.vao) this.gl.renderer.deleteVertexArray(this.vao);\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\n\nexport class Plane extends Geometry {\n    constructor(gl, { width = 1, height = 1, widthSegments = 1, heightSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n\n        // Determine length of arrays\n        const num = (wSegs + 1) * (hSegs + 1);\n        const numIndices = wSegs * hSegs * 6;\n\n        // Generate empty arrays once\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n\n    static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, u = 0, v = 1, w = 2, uDir = 1, vDir = -1, i = 0, ii = 0) {\n        const io = i;\n        const segW = width / wSegs;\n        const segH = height / hSegs;\n\n        for (let iy = 0; iy <= hSegs; iy++) {\n            let y = iy * segH - height / 2;\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\n                let x = ix * segW - width / 2;\n\n                position[i * 3 + u] = x * uDir;\n                position[i * 3 + v] = y * vDir;\n                position[i * 3 + w] = depth / 2;\n\n                normal[i * 3 + u] = 0;\n                normal[i * 3 + v] = 0;\n                normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n\n                uv[i * 2] = ix / wSegs;\n                uv[i * 2 + 1] = 1 - iy / hSegs;\n\n                if (iy === hSegs || ix === wSegs) continue;\n                let a = io + ix + iy * (wSegs + 1);\n                let b = io + ix + (iy + 1) * (wSegs + 1);\n                let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\n                let d = io + ix + iy * (wSegs + 1) + 1;\n\n                index[ii * 6] = a;\n                index[ii * 6 + 1] = b;\n                index[ii * 6 + 2] = d;\n                index[ii * 6 + 3] = b;\n                index[ii * 6 + 4] = c;\n                index[ii * 6 + 5] = d;\n                ii++;\n            }\n        }\n    }\n}\n","// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        if (this.blendEquation.modeRGB) this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n\n            // get supplied uniform\n            let uniform = this.uniforms[name];\n\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","// TODO: delete texture\n// TODO: use texSubImage2D for updates (video or when loaded)\n// TODO: need? encoding = linearEncoding\n// TODO: support non-compressed mipmaps uploads\n\nconst emptyPixel = new Uint8Array(4);\n\nfunction isPowerOf2(value) {\n    return (value & (value - 1)) === 0;\n}\n\nlet ID = 1;\n\nexport class Texture {\n    constructor(\n        gl,\n        {\n            image,\n            target = gl.TEXTURE_2D,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmaps = true,\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            premultiplyAlpha = false,\n            unpackAlignment = 4,\n            flipY = target == gl.TEXTURE_2D ? true : false,\n            anisotropy = 0,\n            level = 0,\n            width, // used for RenderTargets or Data Textures\n            height = width,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.id = ID++;\n\n        this.image = image;\n        this.target = target;\n        this.type = type;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmaps = generateMipmaps;\n        this.premultiplyAlpha = premultiplyAlpha;\n        this.unpackAlignment = unpackAlignment;\n        this.flipY = flipY;\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\n        this.level = level;\n        this.width = width;\n        this.height = height;\n        this.texture = this.gl.createTexture();\n\n        this.store = {\n            image: null,\n        };\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // State store to avoid redundant calls for per-texture state\n        this.state = {};\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        this.state.magFilter = this.gl.LINEAR;\n        this.state.wrapS = this.gl.REPEAT;\n        this.state.wrapT = this.gl.REPEAT;\n        this.state.anisotropy = 0;\n    }\n\n    bind() {\n        // Already bound to active texture unit\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\n        this.gl.bindTexture(this.target, this.texture);\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\n    }\n\n    update(textureUnit = 0) {\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\n\n        // Make sure that texture is bound to its texture unit\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\n            // set active texture unit to perform texture functions\n            this.gl.renderer.activeTexture(textureUnit);\n            this.bind();\n        }\n\n        if (!needsUpdate) return;\n        this.needsUpdate = false;\n\n        if (this.flipY !== this.glState.flipY) {\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n            this.glState.flipY = this.flipY;\n        }\n\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\n        }\n\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n            this.glState.unpackAlignment = this.unpackAlignment;\n        }\n\n        if (this.minFilter !== this.state.minFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\n            this.state.minFilter = this.minFilter;\n        }\n\n        if (this.magFilter !== this.state.magFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\n            this.state.magFilter = this.magFilter;\n        }\n\n        if (this.wrapS !== this.state.wrapS) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\n            this.state.wrapS = this.wrapS;\n        }\n\n        if (this.wrapT !== this.state.wrapT) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\n            this.state.wrapT = this.wrapT;\n        }\n\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\n            this.gl.texParameterf(\n                this.target,\n                this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT,\n                this.anisotropy\n            );\n            this.state.anisotropy = this.anisotropy;\n        }\n\n        if (this.image) {\n            if (this.image.width) {\n                this.width = this.image.width;\n                this.height = this.image.height;\n            }\n\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // For cube maps\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        this.level,\n                        this.internalFormat,\n                        this.format,\n                        this.type,\n                        this.image[i]\n                    );\n                }\n            } else if (ArrayBuffer.isView(this.image)) {\n                // Data texture\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image);\n            } else if (this.image.isCompressedTexture) {\n                // Compressed texture\n                for (let level = 0; level < this.image.length; level++) {\n                    this.gl.compressedTexImage2D(\n                        this.target,\n                        level,\n                        this.internalFormat,\n                        this.image[level].width,\n                        this.image[level].height,\n                        0,\n                        this.image[level].data\n                    );\n                }\n            } else {\n                // Regular texture\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\n            }\n\n            if (this.generateMipmaps) {\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\n                    this.generateMipmaps = false;\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\n                    this.minFilter = this.gl.LINEAR;\n                } else {\n                    this.gl.generateMipmap(this.target);\n                }\n            }\n\n            // Callback for when data is pushed to GPU\n            this.onUpdate && this.onUpdate();\n        } else {\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        0,\n                        this.gl.RGBA,\n                        1,\n                        1,\n                        0,\n                        this.gl.RGBA,\n                        this.gl.UNSIGNED_BYTE,\n                        emptyPixel\n                    );\n                }\n            } else if (this.width) {\n                // image intentionally left null for RenderTarget\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n            } else {\n                // Upload empty pixel if no image to avoid errors while image or video loading\n                this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n            }\n        }\n        this.store.image = this.image;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n","import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform mat4 projectionMatrix;\\nuniform mat4 modelViewMatrix;\\n\\nvarying vec2 vUV;\\n\\nvoid main() {\\n\\n    vec3 pos = position;\\n\\n    // gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\\n    gl_Position = vec4(pos, 1.0);\\n\\n    vUV = uv;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _Video;\\nuniform sampler2D _Output;\\nuniform vec2 _Resolution;\\n\\nvarying vec2 vUV;\\n\\n#define FLOWSTR 0.003\\n\\nvoid main() {\\n\\n    vec2 cameraUV = vec2(1.0 - vUV.x, vUV.y);\\n    cameraUV -= 0.5;\\n    float aspect = (_Resolution.x / _Resolution.y) / (640.0 / 480.0);\\n    cameraUV.y /= aspect;\\n    cameraUV += 0.5;\\n\\n    vec3 flow = texture2D(_Output, vec2(1.0 - cameraUV.x, cameraUV.y)).xyz;\\n    // vec3 camera = texture2D(_Video, cameraUV + flow.xy).xyz;\\n    \\n    float flowMag = min(1.0, length(flow.xy));\\n    flow.xy *= FLOWSTR;\\n\\n    float r = texture2D(_Video, cameraUV + (vec2(0.003, 0.0) *flowMag) + flow.xy).x;\\n    float g = texture2D(_Video, cameraUV + (vec2(0.0, 0.0015) *flowMag) + flow.xy).y;\\n    float b = texture2D(_Video, cameraUV + (vec2(-0.003, 0.0) *flowMag) + flow.xy).z;\\n\\n    vec3 col = vec3(r,g,b);\\n\\n    gl_FragColor = vec4(col, 1.0);\\n    // gl_FragColor = vec4(flow.x, flow.y, 0.0, 1.0);\\n\\n}\";","import {\n    Plane\n} from '../../vendors/ogl/src/extras/Plane';\nimport {\n    Program\n} from '../../Vendors/ogl/src/core/Program';\nimport {\n    Texture\n} from '../../Vendors/ogl/src/core/Texture';\nimport {\n    Mesh\n} from '../../Vendors/ogl/src/core/Mesh';\nimport {\n    Vec2\n} from '../../Vendors/ogl/src/math/Vec2';\n\nconst vert = require(\"./shader/quad.vert\");\nconst frag = require(\"./shader/quad.frag\");\n\nexport default class Quad extends Mesh {\n\n    constructor(gl) {\n\n        super(gl);\n\n        this.gl = gl;\n\n        this.geometry = new Plane(this.gl, {\n            width: 2,\n            height: 2\n        });\n\n        this.texture = new Texture(this.gl, {\n            generateMipmaps: false,\n            minFilter: this.gl.LINEAR,\n            magFilter: this.gl.LINEAR\n        });\n\n        const uniforms = {\n\n            _Video: {\n                value: this.texture\n            },\n\n            _Output: {\n                value: new Texture(this.gl)\n            },\n            _Resolution: {\n                value: new Vec2(this.gl.renderer.width, this.gl.renderer.height)\n            }\n\n        }\n\n        this.program = new Program(this.gl, {\n            vertex: vert,\n            fragment: frag,\n            uniforms,\n            transparent: false\n        });\n\n    }\n\n    update({\n        inputVideo\n    }) {\n\n        if (inputVideo.readyState >= inputVideo.HAVE_CURRENT_DATA) {\n\n            this.texture.image = inputVideo;\n            this.texture.needsUpdate = true;\n\n        }\n\n        this.program.uniforms._Resolution.value.set(this.gl.renderer.width, this.gl.renderer.height);\n\n    }\n\n    set Output(t) {\n        this.program.uniforms._Output.value = t;\n    }\n\n}","// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n// TODO: when would I disableVertexAttribArray ?\n// TODO: use offset/stride if exists\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n\n        if (!attr.buffer) {\n            attr.buffer = this.gl.createBuffer();\n\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        this.gl.bufferData(attr.target, attr.data, this.gl.STATIC_DRAW);\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * numLoc;\n            const offset = numLoc === 1 ? 0 : numLoc * numLoc;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.drawRange.start,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * 2);\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPositionArray() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr.data;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(array) {\n        if (!array) array = this.getPositionArray();\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: use offset/stride if exists\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += 3) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(array) {\n        if (!array) array = this.getPositionArray();\n        if (!this.bounds) this.computeBoundingBox(array);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += 3) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        if (this.vao) this.gl.renderer.deleteVertexArray(this.vao);\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\n\nexport class Triangle extends Geometry {\n    constructor(gl, { attributes = {} } = {}) {\n        Object.assign(attributes, {\n            position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },\n            uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },\n        });\n\n        super(gl, attributes);\n    }\n}\n","// TODO: multi target rendering\n// TODO: test stencil and depth\n// TODO: destroy\n// TODO: blit on resize?\nimport { Texture } from './Texture.js';\n\nexport class RenderTarget {\n    constructor(\n        gl,\n        {\n            width = gl.canvas.width,\n            height = gl.canvas.height,\n            target = gl.FRAMEBUFFER,\n            color = 1, // number of color attachments\n            depth = true,\n            stencil = false,\n            depthTexture = false, // note - stencil breaks\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            minFilter = gl.LINEAR,\n            magFilter = minFilter,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            unpackAlignment,\n            premultiplyAlpha,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.buffer = this.gl.createFramebuffer();\n        this.target = target;\n        this.gl.bindFramebuffer(this.target, this.buffer);\n\n        this.textures = [];\n        const drawBuffers = [];\n\n        // create and attach required num of color textures\n        for (let i = 0; i < color; i++) {\n            this.textures.push(\n                new Texture(gl, {\n                    width,\n                    height,\n                    wrapS,\n                    wrapT,\n                    minFilter,\n                    magFilter,\n                    type,\n                    format,\n                    internalFormat,\n                    unpackAlignment,\n                    premultiplyAlpha,\n                    flipY: false,\n                    generateMipmaps: false,\n                })\n            );\n            this.textures[i].update();\n            this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n            drawBuffers.push(this.gl.COLOR_ATTACHMENT0 + i);\n        }\n\n        // For multi-render targets shader access\n        if (drawBuffers.length > 1) this.gl.renderer.drawBuffers(drawBuffers);\n\n        // alias for majority of use cases\n        this.texture = this.textures[0];\n\n        // note depth textures break stencil - so can't use together\n        if (depthTexture && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension('WEBGL_depth_texture'))) {\n            this.depthTexture = new Texture(gl, {\n                width,\n                height,\n                minFilter: this.gl.NEAREST,\n                magFilter: this.gl.NEAREST,\n                format: this.gl.DEPTH_COMPONENT,\n                internalFormat: gl.renderer.isWebgl2 ? this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\n                type: this.gl.UNSIGNED_INT,\n            });\n            this.depthTexture.update();\n            this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n        } else {\n            // Render buffers\n            if (depth && !stencil) {\n                this.depthBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer);\n            }\n\n            if (stencil && !depth) {\n                this.stencilBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer);\n            }\n\n            if (depth && stencil) {\n                this.depthStencilBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer);\n            }\n        }\n\n        this.gl.bindFramebuffer(this.target, null);\n    }\n}\n","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nvarying vec2 vUV;\\n\\nvoid main() {\\n\\n    gl_Position = vec4(position, 0.0, 1.0);\\n    vUV = uv;\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _CurrentFrame;\\nuniform sampler2D _PrevFrame;\\nuniform sampler2D _PrevFlow;\\n\\nuniform vec2 _Resolution;\\nuniform vec2 _TexelSize;\\nuniform float _Scale;\\n\\nvarying vec2 vUV;\\n\\n// #define TINY 0.000001\\n// #define THRESHOLD 0.007 \\n\\n// #define THRESHOLD 0.007\\n#define THRESHOLD 0.007\\n// #define TINY 0.00001\\n#define TINY 0.000001\\n\\n//HEAVILY INSPIRED FROM FOLLOWING SHADERS: \\n//https://github.com/moostrik/ofxFlowTools/blob/master/src/core/opticalflow/ftOpticalFlowShader.h\\n//By: Matthias Oostrik https://github.com/moostrik\\n\\n//http://www.thomasdiewald.com/\\n\\nvoid main() {\\n\\n    vec2 uv = vec2(1.0 - vUV.x, vUV.y);\\n\\n    //derivative X\\n    float dX = texture2D(_PrevFrame, uv + vec2(_TexelSize.x, 0.0)).x - texture2D(_PrevFrame, uv - vec2(_TexelSize.x, 0.0)).x;\\n    dX += texture2D(_CurrentFrame, uv + vec2(_TexelSize.x, 0.0)).x - texture2D(_CurrentFrame, uv - vec2(_TexelSize.x, 0.0)).x;\\n\\n    //derivative y\\n    float dY = texture2D(_PrevFrame, uv + vec2(0.0, _TexelSize.y)).x - texture2D(_PrevFrame, uv - vec2(0.0, _TexelSize.y)).x;\\n    dY += texture2D(_CurrentFrame, uv + vec2(0.0, _TexelSize.y)).x - texture2D(_CurrentFrame, uv - vec2(0.0, _TexelSize.y)).x;\\n\\n    //gradient magnitude\\n    float mag = sqrt((dX * dX) + (dY * dY) + TINY);\\n\\n    //brightness difference\\n    float dT = texture2D(_CurrentFrame, uv).x - texture2D(_PrevFrame, uv).x;\\n\\n    float vX = (dX / mag) * dT;\\n    float vY = (dY / mag) * dT;\\n\\n    vec2 flow = vec2(vX, vY * -1.0);\\n\\n    // float flowMag = length(flow);\\n    // flowMag = max(flowMag, THRESHOLD);\\n    // flowMag -= THRESHOLD;\\n    // flowMag /= (1.0 - THRESHOLD);\\n    // // flowMag = flowMag * flowMag;\\n    // flow += TINY; //prevents divisions by 0 when normalizing\\n    // flow = normalize(flow) * min(flowMag, 1.0);\\n    // flow *= _Scale; \\n\\n    float oldLen = sqrt((flow.x * flow.x) + (flow.y * flow.y) + 0.00001);\\n    float newLen = max(oldLen - THRESHOLD, 0.0);\\n    flow = (newLen * flow)/oldLen;\\n\\n    flow *= _Scale; \\n\\n    vec3 prevFlow = texture2D(_PrevFlow, vUV).xyz;\\n\\n    vec3 outPut = mix(vec3(flow, length(flow)), prevFlow, 0.93);\\n    // vec3 outPut = mix(vec3(flow, length(flow)), prevFlow, 0.97);\\n    \\n    // gl_FragColor = vec4(vec3(flow, length(flow)), 1.0);\\n    gl_FragColor = vec4(outPut, 1.0);\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D _CameraFrame;\\n\\nvarying vec2 vUV;\\n\\nvoid main() {\\n\\n    vec3 col = texture2D(_CameraFrame, vUV).xyz;\\n    gl_FragColor = vec4(col, 1.0);\\n\\n}\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 _Resolution;\\nuniform sampler2D _Texture;\\nuniform bool _Flip;\\nuniform vec2 _BlurDirection;\\n\\nvarying vec2 vUV;\\n\\n//source: https://github.com/Jam3/glsl-fast-gaussian-blur/blob/master/5.glsl\\n\\nvec4 blur5(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3333333333333333) * direction;\\n  color += texture2D(image, uv).x * 0.29411764705882354;\\n  color += texture2D(image, uv + (off1 / resolution)).x * 0.35294117647058826;\\n  color += texture2D(image, uv - (off1 / resolution)).x * 0.35294117647058826;\\n  return color; \\n}\\n\\nvec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3846153846) * direction;\\n  vec2 off2 = vec2(3.2307692308) * direction;\\n  color += texture2D(image, uv).x * 0.2270270270;\\n  color += texture2D(image, uv + (off1 / resolution)).x * 0.3162162162;\\n  color += texture2D(image, uv - (off1 / resolution)).x * 0.3162162162;\\n  color += texture2D(image, uv + (off2 / resolution)).x * 0.0702702703;\\n  color += texture2D(image, uv - (off2 / resolution)).x * 0.0702702703;\\n  return color;\\n}\\n\\nvoid main() {\\n\\n    gl_FragColor = blur9(_Texture, vUV, _Resolution, _BlurDirection);\\n\\n}\";","import {\n  Transform\n} from \"../../Vendors/ogl/src/core/Transform\";\nimport {\n  Triangle\n} from \"../../Vendors/ogl/src/extras/Triangle\";\nimport {\n  Program\n} from \"../../Vendors/ogl/src/core/Program\";\nimport {\n  Texture\n} from \"../../Vendors/ogl/src/core/Texture\";\nimport {\n  Mesh\n} from \"../../Vendors/ogl/src/core/Mesh\";\nimport {\n  RenderTarget\n} from \"../../Vendors/ogl/src/core/RenderTarget\";\nimport {\n  Vec2\n} from \"../../Vendors/ogl/src/math/Vec2\";\n\nconst vert = require(\"./shaders/triangle.vert\");\nconst opticalFlowFrag = require(\"./shaders/opticalflow.frag\");\nconst captureFrag = require(\"./shaders/capture.frag\");\nconst blur = require(\"./shaders/blur.frag\");\n\n/**\n * Takes a input image and does following:\n * calculates brightness derivatives for optical flow\n * takes the flow image and pass it to a blur pass\n * applies the optical flow texture to a flud sim\n *\n * getters:\n * optical flow\n * fluid sim\n */\n\nexport default class Flow {\n  constructor(gl, {\n    width = 2,\n    height = 2\n  }) {\n    this.gl = gl;\n    this.width = width;\n    this.height = height;\n    this.firstTick = true;\n\n    this.initCameraCapture();\n\n    this.initBlurPass();\n\n    this.initOpticalFlowPass();\n\n    this.initVelocityPass();\n  }\n\n  initCameraCapture() {\n    this.cameraFrame = new Texture(this.gl, {\n      generateMipmaps: false,\n      width: this.width,\n      height: this.height\n    });\n\n    const params = {\n      width: this.width,\n      height: this.height,\n      minFilter: this.gl.LINEAR,\n      magFilter: this.gl.LINEAR,\n      depth: false\n    };\n\n    this.currentFrame = new RenderTarget(this.gl, params);\n\n    this.prevFrame = new RenderTarget(this.gl, params);\n\n    this.cameraCaptureScene = new Transform();\n\n    const uniforms = {\n      _CameraFrame: {\n        value: this.cameraFrame\n      }\n    };\n\n    this.cameraCaptureQuad = new Mesh(this.gl, {\n      geometry: new Triangle(this.gl),\n      program: new Program(this.gl, {\n        vertex: vert,\n        fragment: captureFrag,\n        uniforms,\n        transparent: false\n      })\n    });\n\n    this.cameraCaptureQuad.setParent(this.cameraCaptureScene);\n  }\n\n  initBlurPass() {\n    const params = {\n      width: this.width,\n      height: this.height,\n      minFilter: this.gl.LINEAR,\n      magFilter: this.gl.LINEAR,\n      depth: false\n    };\n\n    this.blurTextureWrite = new RenderTarget(this.gl, params);\n\n    this.blurTextureRead = new RenderTarget(this.gl, params);\n\n    this.blurDirectionX = new Vec2(1.0, 0.0);\n    this.blurDirectionY = new Vec2(0.0, 1.0);\n\n    this.blurScene = new Transform();\n\n    const uniforms = {\n      _Texture: {\n        value: this.blurTextureRead.texture\n      },\n      _Resolution: {\n        value: new Vec2(this.gl.renderer.width, this.gl.renderer.height)\n      },\n      _Flip: {\n        value: false\n      },\n      _BlurDirection: {\n        value: new Vec2(0.0, 0.0)\n      }\n    };\n\n    this.blurQuad = new Mesh(this.gl, {\n      geometry: new Triangle(this.gl),\n      program: new Program(this.gl, {\n        vertex: vert,\n        fragment: blur,\n        uniforms,\n        transparent: false\n      })\n    });\n\n    this.blurQuad.setParent(this.blurScene);\n  }\n\n  initOpticalFlowPass() {\n    //texture where we render the flow vectors\n    const params = {\n      width: this.width,\n      height: this.height,\n      type: this.gl.HALF_FLOAT ||\n        this.gl.renderer.extensions[\"OES_texture_half_float\"].HALF_FLOAT_OES,\n      format: this.gl.RGBA,\n      internalFormat: this.gl.RGBA16F,\n      depth: false\n    };\n\n    this.flowVectorTextureWrite = new RenderTarget(this.gl, params);\n    this.flowVectorTextureRead = new RenderTarget(this.gl, params);\n\n    this.opticalFlowScene = new Transform();\n    const uniforms = {\n      _CurrentFrame: {\n        value: this.currentFrame.texture\n      },\n\n      _PrevFrame: {\n        value: this.prevFrame.texture\n      },\n\n      _PrevFlow: {\n        value: this.flowVectorTextureRead.texture\n      },\n      _Resolution: {\n        value: new Vec2(this.gl.renderer.width, this.gl.renderer.height)\n      },\n      _TexelSize: {\n        value: new Vec2(\n          1.0 / this.width,\n          1.0 / this.height\n        )\n      },\n      // _TexelSize: {\n      //   value: new Vec2(\n      //     0.1,\n      //     0.1\n      //   )\n      // },\n      _Scale: {\n        value: 1000\n      }\n    };\n\n    this.opticalFlowQuad = new Mesh(this.gl, {\n      geometry: new Triangle(this.gl),\n      program: new Program(this.gl, {\n        uniforms,\n        vertex: vert,\n        fragment: opticalFlowFrag,\n        transparent: false\n      })\n    });\n\n    this.opticalFlowQuad.setParent(this.opticalFlowScene);\n  }\n\n  initVelocityPass() {\n    // const params = {\n    //     width: this.width,\n    //     height: this.height,\n    //     type: this.gl.HALF_FLOAT || this.gl.renderer.extensions['OES_texture_half_float'].HALF_FLOAT_OES,\n    //     format: this.gl.RGBA,\n    //     internalFormat: this.gl.RGBA16F,\n    //     depth: false\n    // }\n    // this.velocityTextureRead =\n  }\n\n  blurInputVideo() {\n    const blurIterationCount = 12;\n\n    this.gl.renderer.autoClear = false;\n\n    for (let i = 0; i < blurIterationCount; i++) {\n      let blurRadius = blurIterationCount - i - 1;\n\n      this.blurQuad.program.uniforms._Texture.value =\n        i === 0 ? this.cameraFrame : this.blurTextureRead.texture;\n      this.blurQuad.program.uniforms._BlurDirection.value.set(\n        i % 2 === 0 ? blurRadius : 0,\n        i % 2 === 0 ? 0 : blurRadius\n      );\n      this.blurQuad.program.uniforms._Resolution.value.set(\n        this.gl.renderer.width,\n        this.gl.renderer.height\n      );\n\n      this.gl.renderer.render({\n        scene: this.blurScene,\n        target: this.blurTextureWrite\n      });\n\n      let tmp = this.blurTextureRead;\n      this.blurTextureRead = this.blurTextureWrite;\n      this.blurTextureWrite = tmp;\n    }\n\n    this.gl.renderer.autoClear = true;\n  }\n\n  saveCameraFrame() {\n    let tmp = this.prevFrame;\n    this.prevFrame = this.currentFrame;\n    this.currentFrame = tmp;\n\n    this.cameraCaptureQuad.program.uniforms._CameraFrame.value = this.blurTextureRead.texture;\n    this.gl.renderer.render({\n      scene: this.cameraCaptureScene,\n      target: this.currentFrame\n    });\n  }\n\n  update({\n    inputVideo\n  }) {\n    if (inputVideo.readyState >= inputVideo.HAVE_CURRENT_DATA) {\n      this.cameraFrame.image = inputVideo;\n      this.cameraFrame.needsUpdate = true;\n\n      //...run as usual\n      this.blurInputVideo();\n      this.saveCameraFrame();\n\n      //prewarm to prevent spike in optical flow\n      if (this.firstTick) {\n        this.blurInputVideo();\n        this.saveCameraFrame();\n        this.firstTick = false;\n      }\n    }\n\n    this.opticalFlowQuad.program.uniforms._CurrentFrame.value = this.currentFrame.texture;\n    this.opticalFlowQuad.program.uniforms._PrevFrame.value = this.prevFrame.texture;\n    this.opticalFlowQuad.program.uniforms._PrevFlow.value = this.flowVectorTextureRead.texture;\n    this.opticalFlowQuad.program.uniforms._Resolution.value.set(\n      this.gl.renderer.width,\n      this.gl.renderer.height\n    );\n    this.opticalFlowQuad.program.uniforms._TexelSize.value.set(\n      1.0 / this.gl.renderer.width,\n      1.0 / this.gl.renderer.height\n    );\n\n    this.gl.renderer.render({\n      scene: this.opticalFlowScene,\n      target: this.flowVectorTextureWrite\n    });\n\n    let tmp = this.flowVectorTextureRead;\n    this.flowVectorTextureRead = this.flowVectorTextureWrite;\n    this.flowVectorTextureWrite = tmp;\n  }\n}","// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        if (this.blendEquation.modeRGB) this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n\n            // get supplied uniform\n            let uniform = this.uniforms[name];\n\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\n    attribute vec2 position;\\n    attribute vec2 uv;\\n    varying vec2 vUv;\\n    varying vec2 vL;\\n    varying vec2 vR;\\n    varying vec2 vT;\\n    varying vec2 vB;\\n    uniform vec2 texelSize;\\n        void main () {\\n            vUv = uv;\\n            vL = vUv - vec2(texelSize.x, 0.0);\\n            vR = vUv + vec2(texelSize.x, 0.0);\\n            vT = vUv + vec2(0.0, texelSize.y);\\n            vB = vUv - vec2(0.0, texelSize.y);\\n            gl_Position = vec4(position, 0, 1);\\n}\";","module.exports=\"precision highp float;\\nprecision highp sampler2D;\\n#define GLSLIFY 1\\n\\n    varying vec2 vUv;\\n    uniform sampler2D uVelocity;\\n    uniform sampler2D uSource;\\n    uniform vec2 texelSize;\\n    uniform float dt;\\n    uniform float dissipation;\\n    void main () {\\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\\n        gl_FragColor = dissipation * texture2D(uSource, coord);\\n        gl_FragColor.a = 1.0;\\n}\";","module.exports=\"precision highp float;\\nprecision highp sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nuniform sampler2D uVelocity;\\nuniform sampler2D uSource;\\nuniform vec2 texelSize;\\nuniform vec2 dyeTexelSize;\\nuniform float dt;\\nuniform float dissipation;\\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\\n        vec2 st = uv / tsize - 0.5;\\n        vec2 iuv = floor(st);\\n        vec2 fuv = fract(st);\\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\\n    }\\n    \\n    void main () {\\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\\n        gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);\\n        gl_FragColor.a = 1.0;\\n    }\";","module.exports=\"precision mediump float;\\n    precision mediump sampler2D;\\n#define GLSLIFY 1\\n\\n    varying highp vec2 vUv;\\n    uniform sampler2D uTexture;\\n    uniform float value;\\n\\n    void main () {\\n\\n        gl_FragColor = value * texture2D(uTexture, vUv);\\n\\n}\";","module.exports=\"precision mediump float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying highp vec2 vUv;\\nvarying highp vec2 vL;\\nvarying highp vec2 vR;\\nvarying highp vec2 vT;\\nvarying highp vec2 vB;\\nuniform sampler2D uVelocity;\\nvoid main () {\\n    float L = texture2D(uVelocity, vL).y;\\n    float R = texture2D(uVelocity, vR).y;\\n    float T = texture2D(uVelocity, vT).x;\\n    float B = texture2D(uVelocity, vB).x;\\n    float vorticity = R - L - T + B;\\n    gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\\n}\";","module.exports=\"precision mediump float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\n\\n    varying highp vec2 vUv;\\n    varying highp vec2 vL;\\n    varying highp vec2 vR;\\n    varying highp vec2 vT;\\n    varying highp vec2 vB;\\n    uniform sampler2D uVelocity;\\n    \\n    void main () {\\n        float L = texture2D(uVelocity, vL).x;\\n        float R = texture2D(uVelocity, vR).x;\\n        float T = texture2D(uVelocity, vT).y;\\n        float B = texture2D(uVelocity, vB).y;\\n        vec2 C = texture2D(uVelocity, vUv).xy;\\n            if (vL.x < 0.0) { L = -C.x; }\\n            if (vR.x > 1.0) { R = -C.x; }\\n            if (vT.y > 1.0) { T = -C.y; }\\n            if (vB.y < 0.0) { B = -C.y; }\\n            float div = 0.5 * (R - L + T - B);\\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\\n}\";","module.exports=\"precision mediump float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying highp vec2 vUv;\\nvarying highp vec2 vL;\\nvarying highp vec2 vR;\\nvarying highp vec2 vT;\\nvarying highp vec2 vB;\\nuniform sampler2D uPressure;\\nuniform sampler2D uVelocity;\\nvoid main () {\\n        float L = texture2D(uPressure, vL).x;\\n        float R = texture2D(uPressure, vR).x;\\n        float T = texture2D(uPressure, vT).x;\\n        float B = texture2D(uPressure, vB).x;\\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\\n        velocity.xy -= vec2(R - L, T - B);\\n    gl_FragColor = vec4(velocity, 0.0, 1.0);\\n}\";","module.exports=\"precision mediump float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying highp vec2 vUv;\\nvarying highp vec2 vL;\\nvarying highp vec2 vR;\\nvarying highp vec2 vT;\\nvarying highp vec2 vB;\\nuniform sampler2D uPressure;\\nuniform sampler2D uDivergence;\\nvoid main () {\\n    float L = texture2D(uPressure, vL).x;\\n    float R = texture2D(uPressure, vR).x;\\n    float T = texture2D(uPressure, vT).x;\\n    float B = texture2D(uPressure, vB).x;\\n    float C = texture2D(uPressure, vUv).x;\\n    float divergence = texture2D(uDivergence, vUv).x;\\n    float pressure = (L + R + B + T - divergence) * 0.25;\\n    gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\\n}\";","module.exports=\"precision highp float;\\nprecision highp sampler2D;\\n#define GLSLIFY 1\\n\\n    varying vec2 vUv;\\n    uniform sampler2D uTarget;\\n    uniform float aspectRatio;\\n    uniform sampler2D color;\\n    // uniform vec2 point;\\n    // uniform float radius;\\n    \\n    void main () {\\n        // vec2 p = vUv - point.xy;\\n        // p.x *= aspectRatio;\\n        // vec3 splat = exp(-dot(p, p) / radius) * color; //replace this with optical flow\\n        vec3 splat = texture2D(color, vUv).xyz; //replace this with optical flow\\n        vec3 base = texture2D(uTarget, vUv).xyz;\\n        gl_FragColor = vec4(base + splat, 1.0);\\n}\";","module.exports=\"precision highp float;\\nprecision highp sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nvarying vec2 vL;\\nvarying vec2 vR;\\nvarying vec2 vT;\\nvarying vec2 vB;\\nuniform sampler2D uVelocity;\\nuniform sampler2D uCurl;\\nuniform float curl;\\nuniform float dt;\\nvoid main () {\\n    float L = texture2D(uCurl, vL).x;\\n    float R = texture2D(uCurl, vR).x;\\n    float T = texture2D(uCurl, vT).x;\\n    float B = texture2D(uCurl, vB).x;\\n    float C = texture2D(uCurl, vUv).x;\\n    vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\\n    force /= length(force) + 0.0001;\\n    force *= curl * C;\\n    force.y *= -1.0;\\n    vec2 vel = texture2D(uVelocity, vUv).xy;\\n    gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\\n}\";","import { Program } from \"../../vendors/ogl/src/core/Program\";\nimport { Texture } from \"../../Vendors/ogl/src/core/Texture\";\nimport { Mesh } from \"../../Vendors/ogl/src/core/Mesh\";\nimport { RenderTarget } from \"../../Vendors/ogl/src/core/RenderTarget\";\nimport { Vec2 } from \"../../Vendors/ogl/src/math/Vec2\";\nimport { Geometry } from \"../../Vendors/ogl/src/core/Geometry\";\n\nconst base = require(\"./shaders/baseVertex.vert\");\nconst advectionShader = require(\"./shaders/advection.frag\");\nconst advectionManualFilterShader = require(\"./shaders/advectionManualFiltering.frag\");\nconst clearShader = require(\"./shaders/clear.frag\");\nconst curlShader = require(\"./shaders/curl.frag\");\nconst divergenceShader = require(\"./shaders/divergence.frag\");\nconst gradientSubtractShader = require(\"./shaders/gradientSubtract.frag\");\nconst pressureShader = require(\"./shaders/pressure.frag\");\nconst splatShader = require(\"./shaders/splat.frag\");\nconst vorticityShader = require(\"./shaders/vorticity.frag\");\n\n/**\n * Based on OGL post fluid example: https://github.com/oframe/ogl/blob/master/examples/post-fluid-distortion.html by Nathan Gordon\n */\n\nexport default class Fluid {\n  constructor(gl) {\n    this.gl = gl;\n\n    this.initSimParams();\n    this.initSimulationPrograms();\n  }\n\n  initSimParams() {\n    this.simRes = 256.0;\n    this.dyeRes = 512.0;\n\n    this.texelSize = new Vec2(1.0 / this.simRes);\n\n    this.simParams = {\n      iterations: 4,\n      densityDissipation: 0.98,\n      velocityDissipation: 0.98,\n      pressureDissipation: 0.9,\n      curlStrength: 0.01,\n      radius: 0.2\n\n      // }\n\n      //very gooey!\n      // this.simParams = {\n\n      //     iterations: 4,\n      //     densityDissipation: 0.99,\n      //     velocityDissipation: 0.98,\n      //     pressureDissipation: 0.99,\n      //     curlStrength: 0.1,\n      //     radius: 0.2\n    };\n  }\n\n  initSimulationPrograms() {\n    // Get supported formats and types for FBOs\n    let supportLinearFiltering = this.gl.renderer.extensions[\n      `OES_texture_${this.gl.renderer.isWebgl2 ? `` : `half_`}float_linear`\n    ];\n    const halfFloat = this.gl.renderer.isWebgl2\n      ? this.gl.HALF_FLOAT\n      : this.gl.renderer.extensions[\"OES_texture_half_float\"].HALF_FLOAT_OES;\n    const filtering = supportLinearFiltering ? this.gl.LINEAR : this.gl.NEAREST;\n\n    let rgba, rg, r;\n\n    if (this.gl.renderer.isWebgl2) {\n      rgba = this.getSupportedFormat(\n        this.gl,\n        this.gl.RGBA16F,\n        this.gl.RGBA,\n        halfFloat\n      );\n      rg = this.getSupportedFormat(\n        this.gl,\n        this.gl.RG16F,\n        this.gl.RG,\n        halfFloat\n      );\n      r = this.getSupportedFormat(\n        this.gl,\n        this.gl.R16F,\n        this.gl.RED,\n        halfFloat\n      );\n    } else {\n      rgba = this.getSupportedFormat(\n        this.gl,\n        this.gl.RGBA,\n        this.gl.RGBA,\n        halfFloat\n      );\n      rg = rgba;\n      r = rgba;\n    }\n\n    this.densityFBO = this.createPingPongBuffer({\n      width: this.dyeRes,\n      height: this.dyeRes,\n      type: halfFloat,\n      format: rgba.format,\n      internalFormat: rgba.internalFormat,\n      minFilter: filtering,\n      depth: false\n    });\n\n    this.velocityFBO = this.createPingPongBuffer({\n      width: this.simRes,\n      height: this.simRes,\n      type: halfFloat,\n      format: rg.format,\n      internalFormat: rg.internalFormat,\n      minFilter: filtering,\n      depth: false\n    });\n\n    this.pressureFBO = this.createPingPongBuffer({\n      width: this.simRes,\n      height: this.simRes,\n      type: halfFloat,\n      format: r.format,\n      internalFormat: r.internalFormat,\n      minFilter: this.gl.NEAREST,\n      depth: false\n    });\n\n    this.divergence = new RenderTarget(this.gl, {\n      width: this.simRes,\n      height: this.simRes,\n      type: halfFloat,\n      format: r.format,\n      internalFormat: r.internalFormat,\n      minFilter: this.gl.NEAREST,\n      depth: false\n    });\n\n    this.curl = new RenderTarget(this.gl, {\n      width: this.simRes,\n      height: this.simRes,\n      type: halfFloat,\n      format: r.format,\n      internalFormat: r.internalFormat,\n      minFilter: this.gl.NEAREST,\n      depth: false\n    });\n\n    const triangle = new Geometry(this.gl, {\n      position: {\n        size: 2,\n        data: new Float32Array([-1, -1, 3, -1, -1, 3])\n      },\n      uv: {\n        size: 2,\n        data: new Float32Array([0, 0, 2, 0, 0, 2])\n      }\n    });\n\n    const clearUniforms = {\n      texelSize: {\n        value: this.texelSize\n      },\n      uTexture: {\n        value: null\n      },\n      value: {\n        value: this.simParams.pressureDissipation\n      }\n    };\n\n    this.clearProgram = new Mesh(this.gl, {\n      geometry: triangle,\n      program: new Program(this.gl, {\n        vertex: base,\n        fragment: clearShader,\n        uniforms: clearUniforms,\n        depthTest: false,\n        depthWrite: false\n      })\n    });\n\n    //for texture input\n    const splatUniforms = {\n      texelSize: {\n        value: this.texelSize\n      },\n      uTarget: {\n        value: null\n      },\n      aspectRatio: {\n        value: 1.0\n      },\n      color: {\n        value: new Texture(this.gl)\n      }\n    };\n\n    //for mouse/touch input\n    // const splatUniforms = {\n    //     texelSize: {\n    //         value: this.texelSize\n    //     },\n    //     uTarget: {\n    //         value: null\n    //     },\n    //     aspectRatio: {\n    //         value: 1.0\n    //     },\n    //     color: {\n    //         value: new Color()\n    //     },\n    //     point: {\n    //         value: new Vec2()\n    //     },\n    //     radius: {\n    //         value: 1.0\n    //     }\n    // }\n\n    this.splatProgram = new Mesh(this.gl, {\n      geometry: triangle,\n      program: new Program(this.gl, {\n        vertex: base,\n        fragment: splatShader,\n        uniforms: splatUniforms,\n        depthTest: false,\n        depthWrite: false\n      })\n    });\n\n    const advectionUniforms = {\n      texelSize: {\n        value: this.texelSize\n      },\n      dyeTexelSize: {\n        value: new Vec2(1.0 / this.dyeRes)\n      },\n      uVelocity: {\n        value: null\n      },\n      uSource: {\n        value: null\n      },\n      dt: {\n        value: 0.016\n      },\n      dissipation: {\n        value: 1.0\n      }\n    };\n\n    this.advectionProgram = new Mesh(this.gl, {\n      geometry: triangle,\n      program: new Program(this.gl, {\n        vertex: base,\n        fragment: supportLinearFiltering\n          ? advectionShader\n          : advectionManualFilterShader,\n        uniforms: advectionUniforms,\n        depthTest: false,\n        depthWrite: false\n      })\n    });\n\n    const divergenceUniforms = {\n      texelSize: {\n        value: this.texelSize\n      },\n      uVelocity: {\n        value: null\n      }\n    };\n\n    this.divergenceProgram = new Mesh(this.gl, {\n      geometry: triangle,\n      program: new Program(this.gl, {\n        vertex: base,\n        fragment: divergenceShader,\n        uniforms: divergenceUniforms,\n        depthTest: false,\n        depthWrite: false\n      })\n    });\n\n    const curlUniforms = {\n      texelSize: {\n        value: this.texelSize\n      },\n      uVelocity: {\n        value: null\n      }\n    };\n\n    this.curlProgram = new Mesh(this.gl, {\n      geometry: triangle,\n      program: new Program(this.gl, {\n        vertex: base,\n        fragment: curlShader,\n        uniforms: curlUniforms,\n        depthTest: false,\n        depthWrite: false\n      })\n    });\n\n    const vorticityUniforms = {\n      texelSize: {\n        value: this.texelSize\n      },\n      uVelocity: {\n        value: null\n      },\n      uCurl: {\n        value: null\n      },\n      curl: {\n        value: this.simParams.curlStrength\n      },\n      dt: {\n        value: 0.016\n      }\n    };\n\n    this.vorticityProgram = new Mesh(this.gl, {\n      geometry: triangle,\n      program: new Program(this.gl, {\n        vertex: base,\n        fragment: vorticityShader,\n        uniforms: vorticityUniforms,\n        depthTest: false,\n        depthWrite: false\n      })\n    });\n\n    const pressureUniforms = {\n      texelSize: {\n        value: this.texelSize\n      },\n      uPressure: {\n        value: null\n      },\n      uDivergence: {\n        value: null\n      }\n    };\n\n    this.pressureProgram = new Mesh(this.gl, {\n      geometry: triangle,\n      program: new Program(this.gl, {\n        vertex: base,\n        fragment: pressureShader,\n        uniforms: pressureUniforms,\n        depthTest: false,\n        depthWrite: false\n      })\n    });\n\n    const gradientSubtractUniforms = {\n      texelSize: {\n        value: this.texelSize\n      },\n      uPressure: {\n        value: null\n      },\n      uVelocity: {\n        value: null\n      }\n    };\n\n    this.gradientSubtractProgram = new Mesh(this.gl, {\n      geometry: triangle,\n      program: new Program(this.gl, {\n        vertex: base,\n        fragment: gradientSubtractShader,\n        uniforms: gradientSubtractUniforms,\n        depthTest: false,\n        depthWrite: false\n      })\n    });\n  }\n\n  splat({ flowVectorTexture }) {\n    this.splatProgram.program.uniforms.uTarget.value = this.velocityFBO.read.texture;\n    this.splatProgram.program.uniforms.aspectRatio.value =\n      this.gl.renderer.width / this.gl.renderer.height;\n    this.splatProgram.program.uniforms.color.value = flowVectorTexture;\n\n    this.gl.renderer.render({\n      scene: this.splatProgram,\n      target: this.velocityFBO.write,\n      sort: false,\n      update: false\n    });\n    this.velocityFBO.swap();\n\n    this.splatProgram.program.uniforms.uTarget.value = this.densityFBO.read.texture;\n    this.gl.renderer.render({\n      scene: this.splatProgram,\n      target: this.densityFBO.write,\n      sort: false,\n      update: false\n    });\n\n    this.densityFBO.swap();\n  }\n\n  update({ flowVectorTexture }) {\n    this.gl.renderer.autoClear = false;\n\n    this.splat({\n      flowVectorTexture\n    });\n\n    this.curlProgram.program.uniforms.uVelocity.value = this.velocityFBO.read.texture;\n\n    this.gl.renderer.render({\n      scene: this.curlProgram,\n      target: this.curl,\n      sort: false,\n      update: false\n    });\n\n    this.vorticityProgram.program.uniforms.uVelocity.value = this.velocityFBO.read.texture;\n    this.vorticityProgram.program.uniforms.uCurl.value = this.curl.texture;\n\n    this.gl.renderer.render({\n      scene: this.vorticityProgram,\n      target: this.velocityFBO.write,\n      sort: false,\n      update: false\n    });\n\n    this.velocityFBO.swap();\n\n    this.divergenceProgram.program.uniforms.uVelocity.value = this.velocityFBO.read.texture;\n\n    this.gl.renderer.render({\n      scene: this.divergenceProgram,\n      target: this.divergence,\n      sort: false,\n      update: false\n    });\n\n    this.clearProgram.program.uniforms.uTexture.value = this.pressureFBO.read.texture;\n    this.clearProgram.program.uniforms.value.value = this.simParams.pressureDissipation;\n\n    this.gl.renderer.render({\n      scene: this.clearProgram,\n      target: this.pressureFBO.write,\n      sort: false,\n      update: false\n    });\n\n    this.pressureFBO.swap();\n\n    this.pressureProgram.program.uniforms.uDivergence.value = this.divergence.texture;\n\n    for (let i = 0; i < this.simParams.iterations; i++) {\n      this.pressureProgram.program.uniforms.uPressure.value = this.pressureFBO.read.texture;\n\n      this.gl.renderer.render({\n        scene: this.pressureProgram,\n        target: this.pressureFBO.write,\n        sort: false,\n        update: false\n      });\n\n      this.pressureFBO.swap();\n    }\n\n    this.gradientSubtractProgram.program.uniforms.uPressure.value = this.pressureFBO.read.texture;\n    this.gradientSubtractProgram.program.uniforms.uVelocity.value = this.velocityFBO.read.texture;\n\n    this.gl.renderer.render({\n      scene: this.gradientSubtractProgram,\n      target: this.velocityFBO.write,\n      sort: false,\n      update: false\n    });\n\n    this.velocityFBO.swap();\n\n    this.advectionProgram.program.uniforms.dyeTexelSize.value.set(\n      1 / this.simRes\n    );\n    this.advectionProgram.program.uniforms.uVelocity.value = this.velocityFBO.read.texture;\n    this.advectionProgram.program.uniforms.uSource.value = this.velocityFBO.read.texture;\n    this.advectionProgram.program.uniforms.dissipation.value = this.simParams.velocityDissipation;\n\n    this.gl.renderer.render({\n      scene: this.advectionProgram,\n      target: this.velocityFBO.write,\n      sort: false,\n      update: false\n    });\n\n    this.velocityFBO.swap();\n\n    this.advectionProgram.program.uniforms.dyeTexelSize.value.set(\n      1 / this.dyeRes\n    );\n    this.advectionProgram.program.uniforms.uVelocity.value = this.velocityFBO.read.texture;\n    this.advectionProgram.program.uniforms.uSource.value = this.densityFBO.read.texture;\n    this.advectionProgram.program.uniforms.dissipation.value = this.simParams.densityDissipation;\n\n    this.gl.renderer.render({\n      scene: this.advectionProgram,\n      target: this.densityFBO.write,\n      sort: false,\n      update: false\n    });\n\n    this.densityFBO.swap();\n\n    this.gl.renderer.autoClear = true;\n  }\n\n  get FluidOutput() {\n    return this.densityFBO.read.texture;\n  }\n\n  createPingPongBuffer({\n    width,\n    height,\n    wrapS,\n    wrapT,\n    minFilter = this.gl.LINEAR,\n    magFilter = minFilter,\n    type,\n    format,\n    internalFormat,\n    depth\n  }) {\n    const params = {\n      width,\n      height,\n      wrapS,\n      wrapT,\n      minFilter,\n      magFilter,\n      type,\n      format,\n      internalFormat,\n      depth\n    };\n\n    const fbo = {\n      read: new RenderTarget(this.gl, params),\n      write: new RenderTarget(this.gl, params),\n      swap: () => {\n        let tmp = fbo.read;\n        fbo.read = fbo.write;\n        fbo.write = tmp;\n      }\n    };\n\n    return fbo;\n  }\n\n  supportRenderTextureFormat(gl, internalFormat, format, type) {\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      internalFormat,\n      4,\n      4,\n      0,\n      format,\n      type,\n      null\n    );\n\n    let fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      texture,\n      0\n    );\n\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status != gl.FRAMEBUFFER_COMPLETE) return false;\n    return true;\n  }\n\n  // Helper functions for larger device support\n  getSupportedFormat(gl, internalFormat, format, type) {\n    if (!this.supportRenderTextureFormat(gl, internalFormat, format, type)) {\n      switch (internalFormat) {\n        case gl.R16F:\n          return this.getSupportedFormat(gl, gl.RG16F, gl.RG, type);\n        case gl.RG16F:\n          return this.getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\n        default:\n          return null;\n      }\n    }\n\n    return {\n      internalFormat,\n      format\n    };\n  }\n}\n","import {\n    Renderer\n} from \"../vendors/ogl/src/core/Renderer\";\nimport {\n    Camera\n} from \"../Vendors/ogl/src/core/Camera.js\";\nimport {\n    Transform\n} from \"../Vendors/ogl/src/core/Transform.js\";\nimport {\n    Orbit\n} from \"../Vendors/ogl/src/extras/Orbit.js\";\nimport Quad from \"./Quad/index.js\";\nimport Flow from \"./Flow/index.js\";\nimport Fluid from \"./Fluid/index.js\";\n\n\nexport default class OpticalFlow {\n    constructor() {\n        this.renderer = new Renderer({\n            width: window.innerWidth,\n            height: window.innerHeight,\n            antialias: false\n        });\n\n        this.gl = this.renderer.gl;\n        this.gl.canvas.style.position = \"absolute\";\n        this.gl.clearColor(0.96, 0.96, 0.96, 1.0);\n        this.gl.canvas.style.top = \"0\";\n        this.gl.canvas.style.left = \"0\";\n        this.gl.canvas.style.width = \"100%\";\n        this.gl.canvas.style.height = \"100%\";\n        this.gl.canvas.style.overflow = \"hidden\";\n        this.gl.canvas.style.zIndex = \"-1\";\n        document.body.appendChild(this.gl.canvas);\n\n        this.scene = new Transform();\n\n        this.camera = new Camera(this.gl, {\n            fov: 35,\n            far: 10,\n            aspect: window.innerWidth / window.innerHeight\n        });\n\n        this.orbitCamera = new Orbit(this.camera, {\n            element: this.gl.canvas\n        });\n\n        this.camera.position.z = 5;\n\n        this.initVideo();\n\n        this.initOpticalFlow();\n\n        this.initFluidSim();\n\n        this.initQuad();\n\n        this.initEvents();\n\n        this.start();\n    }\n\n    initVideo() {\n\n        this.streamAvailable = false;\n\n        this.video = document.createElement(\"video\");\n\n        const options = {\n            audio: false,\n            video: {\n                width: 640,\n                height: 480\n            }\n        };\n\n        navigator.mediaDevices\n            .getUserMedia(options)\n            .then(stream => {\n                this.video.srcObject = stream;\n                this.video.play();\n                this.streamAvailable = true;\n            })\n            .catch(error => {\n                console.error(\"no camera found\");\n            });\n    }\n\n    initOpticalFlow() {\n\n        this.flow = new Flow(this.gl, {\n            width: 640,\n            height: 480\n        });\n\n    }\n\n    initFluidSim() {\n\n        this.fluidSim = new Fluid(this.gl);\n\n    }\n\n    initQuad() {\n\n        this.quad = new Quad(this.gl);\n        this.quad.Output = this.flow.flowVectorTextureRead.texture;\n        this.quad.setParent(this.scene);\n\n    }\n\n    initEvents() {\n        window.addEventListener(\"resize\", this.onResize);\n    }\n\n    start() {\n        this.update();\n    }\n\n    render() {\n        this.renderer.render({\n            scene: this.scene,\n            camera: this.camera\n        });\n    }\n\n    update() {\n        window.requestAnimationFrame(() => this.update());\n        if (this.streamAvailable) {\n\n            this.flow.update({\n                inputVideo: this.video\n            });\n\n            this.fluidSim.update({\n                flowVectorTexture: this.flow.flowVectorTextureRead.texture\n            });\n\n            this.quad.update({\n                inputVideo: this.video\n            });\n\n            this.quad.Output = this.fluidSim.FluidOutput;\n            // this.quad.Output = this.flow.flowVectorTextureRead.texture;\n        }\n        this.render();\n    }\n\n    onResize = () => {\n        const w = window.innerWidth;\n        const h = window.innerHeight;\n        const aspect = w / h;\n        this.renderer.setSize(w, h);\n        this.camera.perspective({\n            aspect\n        });\n    };\n}","import OpticalFlow from './index';\n\nexport default class App {\n\n    constructor() {\n\n        console.log('this can\\'t be...real? ◕_◕');\n        console.log('douglas@adventureclub.io');\n        console.log('douglas.lilliequist@gmail.com');\n\n        new OpticalFlow();\n\n    }\n\n}\n\nwindow.onload = () => new App();"]}